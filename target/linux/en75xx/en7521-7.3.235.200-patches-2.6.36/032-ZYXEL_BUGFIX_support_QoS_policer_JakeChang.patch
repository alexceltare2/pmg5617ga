Index: linux-2.6.36/include/linux/netfilter_bridge/ebt_ftos_t.h
===================================================================
--- linux-2.6.36.orig/include/linux/netfilter_bridge/ebt_ftos_t.h	2017-04-26 03:23:04.191158458 +0800
+++ linux-2.6.36/include/linux/netfilter_bridge/ebt_ftos_t.h	2017-04-27 16:47:47.273537318 +0800
@@ -1,12 +1,22 @@
 #ifndef __LINUX_BRIDGE_EBT_FTOS_T_H
 #define __LINUX_BRIDGE_EBT_FTOS_T_H
 
-struct ebt_ftos_info
+struct ebt_ftos_t_info
 {
+    int           ftos_set;
 	unsigned char ftos;
-	unsigned char mask;
+	// EBT_ACCEPT, EBT_DROP or EBT_CONTINUE or EBT_RETURN
 	int target;
 };
 #define EBT_FTOS_TARGET "ftos"
-      
+
+#define FTOS_TARGET       0x01
+#define FTOS_SETFTOS      0x02
+#define FTOS_WMMFTOS      0x04
+#define FTOS_8021QFTOS    0x08
+
+#define DSCP_MASK_SHIFT   5
+#define PRIO_LOC_NFMARK   16
+#define PRIO_LOC_NFMASK   7
+
 #endif
Index: linux-2.6.36/net/bridge/netfilter/ebt_ftos.c
===================================================================
--- linux-2.6.36.orig/net/bridge/netfilter/ebt_ftos.c	2017-04-26 03:23:04.867158458 +0800
+++ linux-2.6.36/net/bridge/netfilter/ebt_ftos.c	2017-04-27 16:47:47.297549320 +0800
@@ -1,5 +1,37 @@
-#if !defined(TCSUPPORT_ORN_EBTABLES)
+/*
+*    Copyright (c) 2003-2012 Broadcom Corporation
+*    All Rights Reserved
+*
+<:label-BRCM:2012:GPL/GPL:standard
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License, version 2, as published by
+the Free Software Foundation (the "GPL").
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+
+A copy of the GPL is available at http://www.broadcom.com/licenses/GPLv2.php, or by
+writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.
+
+:>
+*/
 
+/*
+ *  ebt_ftos
+ *
+ *	Authors:
+ *	 Song Wang <songw@broadcom.com>
+ *
+ *  Feb, 2004
+ *
+ */
+
+// The ftos target can be used in any chain
 #include <linux/module.h>
 #include <linux/skbuff.h>
 #include <linux/ip.h>
@@ -8,124 +40,170 @@
 #include <linux/netfilter/x_tables.h>
 #include <linux/netfilter_bridge/ebtables.h>
 #include <linux/netfilter_bridge/ebt_ftos_t.h>
-#ifdef CONFIG_QOS
-#include <linux/qos_type.h>
-#endif
-//#define QOS_WANIF_MARK	0xff000
-
-#if 1
-static inline __be16 vlan_proto(const struct sk_buff *skb)
-{
-	return vlan_eth_hdr(skb)->h_vlan_encapsulated_proto;
-}
-static inline __be16 pppoe_proto(const struct sk_buff *skb)
-{
-	return *((__be16 *)(skb_mac_header(skb) + ETH_HLEN +
-			    sizeof(struct pppoe_hdr)));
-}
-#endif
 
-/*
-(struct sk_buff **pskb, unsigned int hooknr,
-   const struct net_device *in, const struct net_device *out,
-   const void *data, unsigned int datalen)
- */
+#include <net/dsfield.h>
 
-static int ebt_ftos_mt(const struct sk_buff *skb, struct xt_action_param *par)
-{
-	const struct ebt_ftos_info *ftosinfo = par->matchinfo;
-	struct iphdr *ih = NULL;
-	struct iphdr _iph;
-	__u8 oldtos = 0;
-#ifdef CONFIG_QOS
-	__u8 tos = 0;
-	int rule_no = 0;
-#endif
-
-#if 1  /*Rodney_20090724*/
-	if((skb)->protocol == htons(ETH_P_IP))
-		ih = (struct iphdr *)skb_header_pointer(skb, 0, sizeof(_iph), &_iph);
-	else if(((skb)->protocol == htons(ETH_P_8021Q)) && (vlan_proto(skb) == htons(ETH_P_IP)))
-		ih = (struct iphdr *)(skb_mac_header(skb) + VLAN_ETH_HLEN);
-    else if(((skb)->protocol == htons(ETH_P_PPP_SES)) && (pppoe_proto(skb) == htons(0x0021)))
-		ih = (struct iphdr *)(skb_mac_header(skb) + ETH_HLEN +PPPOE_SES_HLEN);
-	else
-		ih = (struct iphdr *)skb_header_pointer(skb, 0, sizeof(_iph), &_iph);
-#else
-	ih = (struct iphdr *)skb_header_pointer(*pskb, 0, sizeof(_iph), &_iph);
-#endif
-
-	
-	if (!skb_make_writable(skb, sizeof(struct iphdr)))
-		return NF_DROP;
-
-    oldtos = ih->tos;
-#if 0
-	if ( (*pskb)->mark & QOS_WANIF_MARK ) {
-		tos = (ih->tos & ~ftosinfo->mask) | (ftosinfo->ftos & ftosinfo->mask);
-		(*pskb)->mark |= (tos << 18);
-		return ftosinfo->target | ~EBT_VERDICT_BITS;
-	}
-#endif
-#ifdef CONFIG_QOS
-	rule_no = (skb->mark & QOS_RULE_INDEX_MARK) >> 12;
-	if (0 == qostype_chk(EBT_CHK_TYPE, rule_no, NULL, 0)) {
-		tos = (ih->tos & ~ftosinfo->mask) | (ftosinfo->ftos & ftosinfo->mask);
-		set_tos(rule_no, tos);
-		return ftosinfo->target | ~EBT_VERDICT_BITS;
+#define PPPOE_HLEN   6
+#define PPP_TYPE_IPV4   0x0021  /* IPv4 in PPP */
+#define PPP_TYPE_IPV6   0x0057  /* IPv6 in PPP */
+
+static unsigned int ebt_ftos_tg(struct sk_buff *skb, const struct xt_action_param *par)   
+{
+	//struct ebt_ftos_t_info *ftosinfo = (struct ebt_ftos_t_info *)data;
+	const  struct ebt_ftos_t_info *ftosinfo = par->targinfo;
+	struct iphdr *iph = NULL;
+	struct ipv6hdr *ipv6h = NULL;
+        /* Need to recalculate IP header checksum after altering TOS byte */
+	u_int16_t diffs[2];
+
+	/* if VLAN frame, we need to point to correct network header */
+   if (skb->protocol == __constant_htons(ETH_P_IP))
+      iph = (struct iphdr *)(skb->network_header);
+   else if ((skb)->protocol == __constant_htons(ETH_P_IPV6))
+      ipv6h = (struct ipv6hdr *)(skb->network_header);
+   else if (skb->protocol == __constant_htons(ETH_P_8021Q)) {
+      if (*(unsigned short *)(skb->network_header + VLAN_HLEN - 2) == __constant_htons(ETH_P_IP))
+         iph = (struct iphdr *)(skb->network_header + VLAN_HLEN);
+      else if (*(unsigned short *)(skb->network_header + VLAN_HLEN - 2) == __constant_htons(ETH_P_IPV6))
+         ipv6h = (struct ipv6hdr *)(skb->network_header + VLAN_HLEN);
+   }
+   else if (skb->protocol == __constant_htons(ETH_P_PPP_SES)) {
+      if (*(unsigned short *)(skb->network_header + PPPOE_HLEN) == PPP_TYPE_IPV4)
+         iph = (struct iphdr *)(skb->network_header + PPPOE_HLEN + 2);
+      else if (*(unsigned short *)(skb->network_header + PPPOE_HLEN) == PPP_TYPE_IPV6)
+         ipv6h = (struct ipv6hdr *)(skb->network_header + PPPOE_HLEN + 2);
+   }
+   /* if not IP header, do nothing. */
+   if ((iph == NULL) && (ipv6h == NULL))
+	   return ftosinfo->target;
+
+   if ( iph != NULL ) //IPv4
+   {
+	if ((ftosinfo->ftos_set & FTOS_SETFTOS) && (iph->tos != ftosinfo->ftos)) {
+                //printk("ebt_target_ftos:FTOS_SETFTOS .....\n");
+		diffs[0] = htons(iph->tos) ^ 0xFFFF;
+		iph->tos = ftosinfo->ftos;
+		diffs[1] = htons(iph->tos);
+		iph->check = csum_fold(csum_partial((char *)diffs,
+		                                    sizeof(diffs),
+		                                    iph->check^0xFFFF));		
+// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+// member below is removed
+//		(*pskb)->nfcache |= NFC_ALTERED;
+	} else if (ftosinfo->ftos_set & FTOS_WMMFTOS) {
+	    //printk("ebt_target_ftos:FTOS_WMMFTOS .....0x%08x\n", (*pskb)->mark & 0xf);
+      diffs[0] = htons(iph->tos) ^ 0xFFFF;
+      iph->tos |= ((skb->mark >> PRIO_LOC_NFMARK) & PRIO_LOC_NFMASK) << DSCP_MASK_SHIFT;
+      diffs[1] = htons(iph->tos);
+      iph->check = csum_fold(csum_partial((char *)diffs,
+		                                    sizeof(diffs),
+		                                    iph->check^0xFFFF));
+// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+// member below is removed
+//        (*pskb)->nfcache |= NFC_ALTERED;
+	} else if ((ftosinfo->ftos_set & FTOS_8021QFTOS) && skb->protocol == __constant_htons(ETH_P_8021Q)) {
+	    
+      struct vlan_hdr *frame;	
+      unsigned char prio = 0;
+      unsigned short TCI;
+
+      frame = (struct vlan_hdr *)(skb->network_header);
+      TCI = ntohs(frame->h_vlan_TCI);
+      prio = (unsigned char)((TCI >> 13) & 0x7);
+        //printk("ebt_target_ftos:FTOS_8021QFTOS ..... 0x%08x\n", prio);
+      diffs[0] = htons(iph->tos) ^ 0xFFFF;
+      iph->tos |= (prio & 0xf) << DSCP_MASK_SHIFT;
+      diffs[1] = htons(iph->tos);
+      iph->check = csum_fold(csum_partial((char *)diffs,
+		                                    sizeof(diffs),
+		                                    iph->check^0xFFFF)); 
+// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+// member below is removed
+//        (*pskb)->nfcache |= NFC_ALTERED;
 	}
-	else {
-		unset_tos(rule_no);
-	}
-#endif
-
-    ih->tos = (ih->tos & ~ftosinfo->mask) | (ftosinfo->ftos & ftosinfo->mask);
-    csum_replace2(&ih->check, htons(oldtos), htons(ih->tos));
+   }
+   else //IPv6
+   {
+      __u8 tos;
+
+      /* TOS consists of priority field and first 4 bits of flow_lbl */
+      tos = ipv6_get_dsfield((struct ipv6hdr *)(ipv6h));
+
+      if ((ftosinfo->ftos_set & FTOS_SETFTOS) && (tos != ftosinfo->ftos))
+      {
+         //printk("ebt_target_ftos:FTOS_SETFTOS .....\n");
+         ipv6_change_dsfield((struct ipv6hdr *)(ipv6h), 0, ftosinfo->ftos);
+      } 
+      else if (ftosinfo->ftos_set & FTOS_WMMFTOS) 
+      {
+         //printk("ebt_target_ftos:FTOS_WMMFTOS .....0x%08x\n", 
+	     tos |= ((skb->mark >> PRIO_LOC_NFMARK) & PRIO_LOC_NFMASK) << DSCP_MASK_SHIFT;
+         ipv6_change_dsfield((struct ipv6hdr *)(ipv6h), 0, tos);
+      } 
+      else if ((ftosinfo->ftos_set & FTOS_8021QFTOS) && 
+               skb->protocol == __constant_htons(ETH_P_8021Q)) 
+      {
+         struct vlan_hdr *frame;	
+         unsigned char prio = 0;
+         unsigned short TCI;
+
+         frame = (struct vlan_hdr *)(skb->network_header);
+         TCI = ntohs(frame->h_vlan_TCI);
+         prio = (unsigned char)((TCI >> 13) & 0x7);
+         //printk("ebt_target_ftos:FTOS_8021QFTOS ..... 0x%08x\n", prio);
+         tos |= (prio & 0xf) << DSCP_MASK_SHIFT;
+         ipv6_change_dsfield((struct ipv6hdr *)(ipv6h), 0, tos);
+      }
+   }
 
-    return ftosinfo->target | ~EBT_VERDICT_BITS;
+	return ftosinfo->target;
 }
-/*
-static int ebt_target_ftos_check(const char *tablename, unsigned int hookmask,
-   const struct ebt_entry *e, void *data, unsigned int datalen)
-*/
 
-static int ebt_ftos_mt_check(const struct xt_mtchk_param *par)
+static int ebt_ftos_tg_check(const struct xt_tgchk_param *par)
 {
-	struct ebt_ftos_info *info = (struct ebt_ftos_info *)par->matchinfo;
+	const struct ebt_ftos_t_info *info = par->targinfo;
 /*
-	if (datalen != sizeof(struct ebt_ftos_info))
+	if (datalen != sizeof(struct ebt_ftos_t_info))
 		return -EINVAL;
 */
 	if (BASE_CHAIN && info->target == EBT_RETURN)
 		return -EINVAL;
-//	CLEAR_BASE_CHAIN_BIT;
+	
+	//CLEAR_BASE_CHAIN_BIT;
+	
 	if (INVALID_TARGET)
 		return -EINVAL;
+	
 	return 0;
 }
 
-static struct xt_target ftos_target __read_mostly=
-{
-	.name		= "ftos",
-	.revision	= 0,
-	.family		= NFPROTO_BRIDGE,
-	.target		= ebt_ftos_mt,
-	.checkentry	= ebt_ftos_mt_check,
-	.targetsize	= sizeof(struct ebt_ftos_info),
-	.me		= THIS_MODULE,
+static struct xt_target ebt_ftos_tg_reg = {
+	.name       = EBT_FTOS_TARGET,
+	.revision   = 0,
+	.family     = NFPROTO_BRIDGE,
+	.target     = ebt_ftos_tg,
+	.checkentry = ebt_ftos_tg_check,
+	.targetsize = XT_ALIGN(sizeof(struct ebt_ftos_t_info)),
+	.me         = THIS_MODULE,
 };
 
 static int __init ebt_ftos_init(void)
 {
-	return xt_register_target(&ftos_target);
+	int ret;
+	ret = xt_register_target(&ebt_ftos_tg_reg);
+	if(ret == 0)
+		printk(KERN_INFO "ebt_ftos registered\n");
+
+	return ret;
 }
 
 static void __exit ebt_ftos_fini(void)
 {
-	xt_unregister_target(&ftos_target);
+	xt_unregister_target(&ebt_ftos_tg_reg);
 }
 
 module_init(ebt_ftos_init);
 module_exit(ebt_ftos_fini);
 MODULE_LICENSE("GPL");
-#endif
+MODULE_AUTHOR("Song Wang, songw@broadcom.com");
+MODULE_DESCRIPTION("Target to overwrite the full TOS byte in IP header");
\ No newline at end of file
Index: linux-2.6.36/include/linux/skb_defines.h
===================================================================
--- linux-2.6.36.orig/include/linux/skb_defines.h	2017-04-27 16:29:27.487919319 +0800
+++ linux-2.6.36/include/linux/skb_defines.h	2017-04-27 16:47:47.297549320 +0800
@@ -1,62 +1,62 @@
 #ifndef __SKB_DEFINEDS_H__
 #define __SKB_DEFINEDS_H__
 
-/* queue = mark[4:0] */
-#define SKBMARK_Q_S             0
-#define SKBMARK_Q_M             (0x1F << SKBMARK_Q_S)
+/* queue = mark[7:4] */
+#define SKBMARK_Q_S             4
+#define SKBMARK_Q_M             (0x0F << SKBMARK_Q_S)
 #define SKBMARK_GET_Q(MARK)     ((MARK & SKBMARK_Q_M) >> SKBMARK_Q_S)
 #define SKBMARK_SET_Q(MARK, Q)  ((MARK & ~SKBMARK_Q_M) | (Q << SKBMARK_Q_S))
 
-/* guest_wlan_id = mark[9:9] */
-#define SKBMARK_GWL_ID_S         9
+/* guest_wlan_id = mark[27:27] */
+#define SKBMARK_GWL_ID_S         27
 #define SKBMARK_GWL_ID_M         (0x1 << SKBMARK_GWL_ID_S)
 #define SKBMARK_GET_GWL_ID(MARK) \
 	((MARK & SKBMARK_GWL_ID_M) >> SKBMARK_GWL_ID_S)
 #define SKBMARK_SET_GWL_ID(MARK, TC) \
 	((MARK & ~SKBMARK_GWL_ID_M) | (TC << SKBMARK_GWL_ID_S))
-
-/* parental_control_id = mark[10:10] */
+	
+/* parental_control_id = mark[26:26] */
 /* reuse for Voice port reserve */
-#define SKBMARK_PC_ID_S         10
+#define SKBMARK_PC_ID_S         26
 #define SKBMARK_PC_ID_M         (0x1 << SKBMARK_PC_ID_S)
 #define SKBMARK_GET_PC_ID(MARK) ((MARK & SKBMARK_PC_ID_M) >> SKBMARK_PC_ID_S)
 #define SKBMARK_SET_PC_ID(MARK, TC) \
-    ((MARK & ~SKBMARK_PC_ID_M) | (TC << SKBMARK_PC_ID_S))
-
-/* flow_id = mark[18:11]; for QoS Classifier */
-#define SKBMARK_FLOW_ID_S       11
-#define SKBMARK_FLOW_ID_M       (0xFF << SKBMARK_FLOW_ID_S)
+    ((MARK & ~SKBMARK_PC_ID_M) | (TC << SKBMARK_PC_ID_S))	
+	
+/* flow_id = mark[13:8]; for QoS Classifier */
+#define SKBMARK_FLOW_ID_S       8
+#define SKBMARK_FLOW_ID_M       (0x3F << SKBMARK_FLOW_ID_S)
 #define SKBMARK_GET_FLOW_ID(MARK) \
     ((MARK & SKBMARK_FLOW_ID_M) >> SKBMARK_FLOW_ID_S)
 #define SKBMARK_SET_FLOW_ID(MARK, FLOW) \
     ((MARK & ~SKBMARK_FLOW_ID_M) | (FLOW << SKBMARK_FLOW_ID_S))
 
-/* VID_ACTION = mark[21:20], Change the bits used for Qos vlan operation. Original bits and WMM overlap */
-#define SKBMARK_VID_ACTION_S       20
+/* VID_ACTION = mark[25:24], Change the bits used for Qos vlan operation. Original bits and WMM overlap */
+#define SKBMARK_VID_ACTION_S       24
 #define SKBMARK_VID_ACTION_M       (0x03 << SKBMARK_VID_ACTION_S)
 #define SKBMARK_GET_VID_ACTION(MARK) \
 	((MARK & SKBMARK_VID_ACTION_M) >> SKBMARK_VID_ACTION_S)
 #define SKBMARK_SET_VID_ACTION(MARK, FLOW) \
 	((MARK & ~SKBMARK_VID_ACTION_M) | (FLOW << SKBMARK_VID_ACTION_S))
 
-/* POLICER = mark[23:22], Change the bits used for Qos policer */
-#define SKBMARK_POLICER_S       22
+/* POLICER = mark[15:14], Change the bits used for Qos policer */
+#define SKBMARK_POLICER_S       14
 #define SKBMARK_POLICER_M       (0x03 << SKBMARK_POLICER_S)
 #define SKBMARK_GET_POLICER(MARK) \
     ((MARK & SKBMARK_POLICER_M) >> SKBMARK_POLICER_S)
 #define SKBMARK_SET_POLICER(MARK, FLOW) \
-    ((MARK & ~SKBMARK_POLICER_M) | (FLOW << SKBMARK_POLICER_S))
+    ((MARK & ~SKBMARK_POLICER_M) | (FLOW << SKBMARK_POLICER_S))	
 
-/* service route = mark[27:24]; for service route*/
-#define SKBMARK_SERVICEROUTE_S          24
+/* service route = mark[3:0]; for service route*/
+#define SKBMARK_SERVICEROUTE_S          0
 #define SKBMARK_SERVICEROUTE_M          (0x0f << SKBMARK_SERVICEROUTE_S)
 #define SKBMARK_GET_SERVICEROUTE(MARK) \
 	((MARK & SKBMARK_SERVICEROUTE_M) >> SKBMARK_SERVICEROUTE_S)
 #define SKBMARK_SET_SERVICEROUTE(MARK, SERVICEROUTE) \
 	((MARK & ~SKBMARK_SERVICEROUTE_M) | (SERVICEROUTE << SKBMARK_SERVICEROUTE_S))
 
-/* iffwan_mark = mark[28]; check packet is form WAN interface */
-#define SKBMARK_IFFWAN_MARK_S    28
+/* iffwan_mark = mark[16]; check packet is form WAN interface */
+#define SKBMARK_IFFWAN_MARK_S    16
 #define SKBMARK_IFFWAN_MARK_M    (0x01 << SKBMARK_IFFWAN_MARK_S)
 #define SKBMARK_GET_IFFWAN_MARK(MARK) \
     ((MARK & SKBMARK_IFFWAN_MARK_M) >> SKBMARK_IFFWAN_MARK_S)
Index: linux-2.6.36/net/bridge/netfilter/ebt_policer.c
===================================================================
--- linux-2.6.36.orig/net/bridge/netfilter/ebt_policer.c	2017-04-27 16:29:27.435893319 +0800
+++ linux-2.6.36/net/bridge/netfilter/ebt_policer.c	2017-04-27 16:47:47.297549320 +0800
@@ -50,7 +50,7 @@
 	/* The algorithm used is the Simple Token Bucket Filter (TBF)
 	   see net/sched/sch_tbf.c in the linux source tree. */
 	case MODE_TBF: 
-		r->credit += (now - xchg(&r->prev, now)) * r->rate; /* Add TBF cerdit */ 
+		r->credit += (now - xchg(&r->prev, now)) * r->rate * KILO_SCALE / HZ; /* Add TBF cerdit */ 
 		if (r->credit > r->creditCap) {
 			r->credit = r->creditCap;
 		}
@@ -72,7 +72,7 @@
 	/* Single Rate Three Color Marker (srTCM) Mode */
 	case MODE_SRTCM:
 		/* Add CBS first */
-		r->credit += (now - xchg(&r->prev, now)) * r->rate; /* Add CBS cerdit */
+		r->credit += (now - xchg(&r->prev, now)) * r->rate * KILO_SCALE / HZ; /* Add CBS cerdit */
 		if (r->credit > r->creditCap) {
 			extraCredit = r->credit - r->creditCap;
 			r->credit = r->creditCap;
@@ -106,8 +106,8 @@
 	/* Two Rate Three Color Marker (srTCM) Mode */
 	case MODE_TRTCM:
 		timePassed = (now - xchg(&r->prev, now));
-		r->credit += timePassed * r->rate;            /* Add CBS cerdit */
-		r->pbsCredit += timePassed * r->pRate;        /* Add PBS cerdit */
+		r->credit += timePassed * r->rate * KILO_SCALE / HZ;            /* Add CBS cerdit */
+		r->pbsCredit += timePassed * r->pRate * KILO_SCALE / HZ;        /* Add PBS cerdit */
 		if (r->credit > r->creditCap) {
 			r->credit = r->creditCap;
 		}
