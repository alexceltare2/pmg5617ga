Index: linux-2.6.36/arch/mips/ralink/Makefile
===================================================================
--- linux-2.6.36.orig/arch/mips/ralink/Makefile	2017-04-24 20:50:59.061259146 +0800
+++ linux-2.6.36/arch/mips/ralink/Makefile	2017-04-26 01:04:11.439343782 +0800
@@ -10,6 +10,7 @@
 #	tcadsl.o 
 #	ledcetrl.o
 
+obj-$(ZYXEL_SUPPORT_USB_PROTECTION_CIRCUIT) += usb_oc_protect.o
 obj-$(CONFIG_MIPS_TC3162) += time.o
 obj-$(CONFIG_MIPS_TC3162U) += time.o
 obj-$(CONFIG_MIPS_TC3262) += time2.o
@@ -19,4 +20,4 @@
 obj-$(TCSUPPORT_KPROFILE)	+= kprofile_hook.o
 ifneq ($(strip $(RTP_RX_SHORTCUT)),)
 obj-$(TCSUPPORT_VOIP)	+= voip_hook.o
-endif
\ No newline at end of file
+endif
Index: linux-2.6.36/arch/mips/ralink/usb_oc_protect.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.36/arch/mips/ralink/usb_oc_protect.c	2017-04-26 01:15:42.472045773 +0800
@@ -0,0 +1,328 @@
+/************************************************************************
+ *
+ *	20150702, TimLiu, using for control/detect the additional power switch
+ *				for USB. It prevent USB to facing over current.
+ *
+ *************************************************************************/
+
+#include <linux/kernel.h>
+#include <linux/spinlock.h>
+#include <linux/interrupt.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/timer.h>
+#include <linux/proc_fs.h>
+#include <linux/version.h>
+#include <asm/addrspace.h>
+#include <asm/tc3162/tc3162.h>
+#include <asm/tc3162/ledcetrl.h>
+
+static int g_debug_flag = 0;
+#define DBG_MSG(F, B...)	{ \
+								if(g_debug_flag) 	\
+									printk("[%d] " F, (uint)jiffies, ##B) ; \
+							}
+
+#define SUPPORT_MCI2544A_1 1	//Enable pin is active high
+//#define SUPPORT_MCI2544A_2 1	//Enable pin is active low
+
+// The power switch have 2 signal connect to SoC`s GPIO.
+#define POWERSWITCH_ENABLE_GPIO		ZYXEL_USB_OC_ENABLE_GPIO
+#define USB_OVERCURRENT_FLAG_GPIO	ZYXEL_USB_OC_FLAG_GPIO
+
+#define USB_OC_TIMMER_INTERVAL	(HZ/10)
+#define USB_OC_TIMEOUT			10
+
+//using for set/get GPIO 0~63
+#define SET_GPIO_LOW(x)		do {	\
+								if(x > 31) {	\
+									regWrite32(CR_GPIO_DATA1,regRead32(CR_GPIO_DATA1)& ~(1<<(x-32)));	\
+								}else{	\
+									regWrite32(CR_GPIO_DATA,regRead32(CR_GPIO_DATA)& ~(1<<x));	\
+								}\
+							} while(0)
+#define SET_GPIO_HIGH(x)	do {	\
+								if(x > 31) {	\
+									regWrite32(CR_GPIO_DATA1,regRead32(CR_GPIO_DATA1)|(1<<(x-32)));	\
+								}else{	\
+									regWrite32(CR_GPIO_DATA,regRead32(CR_GPIO_DATA)|(1<<x));	\
+								}\
+							} while(0)
+static int GET_GPIO(int x) {
+	if(x > 31)
+		return (regRead32(CR_GPIO_DATA1)|(1<<(x-32)));
+	else
+		return (regRead32(CR_GPIO_DATA)&(1<<x));
+	return 0;
+}
+/* set input/output mode for gpio 0~63 */
+#define SET_GPIO_IN(x)	do { 	\
+									if(x > 31){							\
+										if(x > 47)						\
+											regWrite32(CR_GPIO_CTRL3,regRead32(CR_GPIO_CTRL3)&~(0x00000003 << ((x-48)* 2)));	\
+										else							\
+											regWrite32(CR_GPIO_CTRL2,regRead32(CR_GPIO_CTRL2)&~(0x00000003 << ((x-32)* 2)));	\
+										regWrite32(CR_GPIO_ODRAIN1,regRead32(CR_GPIO_ODRAIN1)&~(0x00000001 << (x-32)));	\
+									}									\
+									else{								\
+										if(x > 15)						\
+											regWrite32(CR_GPIO_CTRL1,regRead32(CR_GPIO_CTRL1)&~(0x00000003 << ((x-16)* 2)));	\
+										else							\
+											regWrite32(CR_GPIO_CTRL,regRead32(CR_GPIO_CTRL)&~(0x00000003 << (x* 2)));	\
+										regWrite32(CR_GPIO_ODRAIN,regRead32(CR_GPIO_ODRAIN)&~(0x00000001 << x));	\
+									}	\
+						} while(0)
+#define SET_GPIO_OUT(x)	do { 	\
+								if(x > 31){							\
+									if(x > 47){						\
+										regWrite32(CR_GPIO_CTRL3,regRead32(CR_GPIO_CTRL3)|(1<<((x-48)*2)));	\
+									}else{							\
+										regWrite32(CR_GPIO_CTRL2,regRead32(CR_GPIO_CTRL2)|(1<<((x-32)*2)));	\
+									}								\
+									regWrite32(CR_GPIO_ODRAIN1,regRead32(CR_GPIO_ODRAIN1)|(1<<(x-32)));	\
+								}									\
+								else{								\
+									if(x > 15){						\
+										regWrite32(CR_GPIO_CTRL1,regRead32(CR_GPIO_CTRL1)|(1<<((x-16)*2)));	\
+									}else{							\
+										regWrite32(CR_GPIO_CTRL,regRead32(CR_GPIO_CTRL)|(1<<(x*2)));	\
+									}								\
+									regWrite32(CR_GPIO_ODRAIN,regRead32(CR_GPIO_ODRAIN)|(1<<(x)));	\
+								}	\
+							} while(0)
+static int IS_GPIO_OUT(int gpio_num) {
+	int val=0;
+	if(gpio_num > 31){
+		if(gpio_num > 47){
+			val = (regRead32(CR_GPIO_CTRL3)&(0x00000003<<((gpio_num-48)*2)));
+		}else{
+			val = (regRead32(CR_GPIO_CTRL2)&(0x00000003<<((gpio_num-32)*2)));
+		}
+	}
+	else{
+		if(gpio_num > 15){
+			val = (regRead32(CR_GPIO_CTRL1)&(0x00000003<<((gpio_num-16)*2)));
+		}else{
+			val = (regRead32(CR_GPIO_CTRL)&(0x00000003<<(gpio_num*2)));
+		}
+	}
+	DBG_MSG("IS_GPIO_OUT(%d)=%x\n", gpio_num, val);
+	if(val) return 1;
+	return 0;
+}
+
+static int OC_FLG=0;
+static int RESET_STATE=0;
+
+#ifdef ZYXEL_USB_OC_FLAG_SUPPORT
+static int flag_read_proc(char *page, char **start, off_t off,
+		int count, int *eof, void *data){
+
+	int len;
+
+	len = sprintf(page, "%d\n", GET_GPIO(USB_OVERCURRENT_FLAG_GPIO)?1:0);
+	len -= off;
+	*start = page + off;
+
+	if (len > count)
+		len = count;
+	else
+		*eof = 1;
+
+	if (len < 0)
+		len = 0;
+
+	return len;
+}
+#endif
+static int enable_read_proc(char *page, char **start, off_t off,
+		int count, int *eof, void *data){
+
+	int len;
+
+	len = sprintf(page, "%d\n", GET_GPIO(POWERSWITCH_ENABLE_GPIO)?1:0);
+	len -= off;
+	*start = page + off;
+
+	if (len > count)
+		len = count;
+	else
+		*eof = 1;
+
+	if (len < 0)
+		len = 0;
+
+	return len;
+}
+static int enable_write_proc(struct file *file, const char *buffer,
+	unsigned long count, void *data){
+	char val_string[3];
+	uint enable;
+
+	if (count > sizeof(val_string) - 1)
+		return -EINVAL;
+
+	if (copy_from_user(val_string, buffer, count))
+		return -EFAULT;
+
+	val_string[count] = '\0';
+
+	sscanf(val_string, "%d", &enable) ;
+
+	if((enable != 0) && (enable != 1)){
+		printk("Input parameter error!\n");
+	}
+	else{
+		if(enable)
+			SET_GPIO_HIGH(POWERSWITCH_ENABLE_GPIO);
+		else
+			SET_GPIO_LOW(POWERSWITCH_ENABLE_GPIO);
+	}
+
+	return count;
+}
+
+static int debug_write_proc(struct file *file, const char *buffer,
+	unsigned long count, void *data){
+	char val_string[3];
+	uint debug;
+
+	if (count > sizeof(val_string) - 1)
+		return -EINVAL;
+
+	if (copy_from_user(val_string, buffer, count))
+		return -EFAULT;
+	val_string[count] = '\0';
+
+	sscanf(val_string, "%d", &debug) ;
+
+	if((debug != 0) && (debug != 1)){
+		printk("Input parameter error!\n");
+	}
+	else{
+		g_debug_flag = debug;
+		printk("set debug flag to %d\n", g_debug_flag);
+	}
+
+	return count;
+}
+
+struct proc_dir_entry *usb_oc_proc_dir=NULL, *usb_oc_proc_enable=NULL, *usb_oc_proc_falg=NULL, *usb_oc_proc_debug=NULL;
+static struct timer_list usb_timer;
+
+void gpioModeChk(void)
+{
+	// make sure Power Switch Enable pin is output
+	if(!IS_GPIO_OUT(POWERSWITCH_ENABLE_GPIO)) {
+		SET_GPIO_OUT(POWERSWITCH_ENABLE_GPIO);
+		DBG_MSG("set GPIO %d to output\n", POWERSWITCH_ENABLE_GPIO);
+	}
+	#ifdef ZYXEL_USB_OC_FLAG_SUPPORT
+	// make sure Over Current Flag pin is input
+	if(IS_GPIO_OUT(USB_OVERCURRENT_FLAG_GPIO)) {
+		SET_GPIO_IN(USB_OVERCURRENT_FLAG_GPIO);
+		DBG_MSG("set GPIO %d to input\n", USB_OVERCURRENT_FLAG_GPIO);
+	}
+	DBG_MSG("GPIO %d mode is %x\n", USB_OVERCURRENT_FLAG_GPIO, (regRead32(CR_GPIO_CTRL)&(0x00000003 << (USB_OVERCURRENT_FLAG_GPIO* 2))) );
+	#endif
+	DBG_MSG("GPIO %d mode is %x\n", POWERSWITCH_ENABLE_GPIO, (regRead32(CR_GPIO_CTRL)&(0x00000003 << (POWERSWITCH_ENABLE_GPIO* 2))) );
+}
+
+void usbTimer(void)
+{
+	gpioModeChk();
+
+	if(RESET_STATE == 2) {
+		#ifdef SUPPORT_MCI2544A_1
+		//pull low for step 1 to reset power switch
+		SET_GPIO_LOW(POWERSWITCH_ENABLE_GPIO);
+		DBG_MSG("Enter reset %d, POWERSWITCH_ENABLE_GPIO is %d\n", RESET_STATE, GET_GPIO(POWERSWITCH_ENABLE_GPIO)?1:0);
+		#endif
+		RESET_STATE=1;
+	}else if(RESET_STATE == 1) {
+		#ifdef SUPPORT_MCI2544A_1
+		//pull high for step 2 to reset power switch
+		//re-enable the power switch
+		SET_GPIO_HIGH(POWERSWITCH_ENABLE_GPIO);
+		DBG_MSG("Enter reset %d, POWERSWITCH_ENABLE_GPIO is %d\n", RESET_STATE, GET_GPIO(POWERSWITCH_ENABLE_GPIO)?1:0);
+		#endif
+		RESET_STATE=0;
+		OC_FLG=0;
+	}
+	#ifdef ZYXEL_USB_OC_FLAG_SUPPORT
+	else {
+		if(!GET_GPIO(USB_OVERCURRENT_FLAG_GPIO)) {
+			OC_FLG++;
+			if(OC_FLG >= USB_OC_TIMEOUT) {
+				RESET_STATE=2;
+				printk("Occur usb over current event!!\n");
+			}
+		}else
+			OC_FLG=0;
+	}
+	DBG_MSG("GET_GPIO(USB_OVERCURRENT_FLAG_GPIO)=%d, OC_FLG=%d\n", GET_GPIO(USB_OVERCURRENT_FLAG_GPIO)?1:0, OC_FLG);
+#endif
+	mod_timer(&usb_timer, jiffies + USB_OC_TIMMER_INTERVAL);
+
+}
+
+static int __init usb_oc_protect_init(void)
+{
+	gpioModeChk();
+#ifdef SUPPORT_MCI2544A_1
+	//pull high to enable power switch
+	SET_GPIO_HIGH(POWERSWITCH_ENABLE_GPIO);
+#endif
+	OC_FLG = 0;
+
+	init_timer(&usb_timer);
+	usb_timer.expires = jiffies + USB_OC_TIMMER_INTERVAL;
+	usb_timer.function = usbTimer;
+	add_timer(&usb_timer);
+
+	/* create proc node */
+	usb_oc_proc_dir = proc_mkdir("usb_oc", NULL);
+
+	if(usb_oc_proc_dir) {
+		usb_oc_proc_enable = create_proc_entry("enable", 0, usb_oc_proc_dir);
+		usb_oc_proc_enable->read_proc = enable_read_proc;
+		usb_oc_proc_enable->write_proc = enable_write_proc;
+		#ifdef ZYXEL_USB_OC_FLAG_SUPPORT
+		usb_oc_proc_falg = create_proc_entry("flag", 0, usb_oc_proc_dir);
+		usb_oc_proc_falg->read_proc = flag_read_proc;
+		usb_oc_proc_falg->write_proc = NULL;
+		#endif
+		usb_oc_proc_debug = create_proc_entry("debug", 0, usb_oc_proc_dir);
+		usb_oc_proc_debug->read_proc = NULL;
+		usb_oc_proc_debug->write_proc = debug_write_proc;
+	}
+	printk("USB overcurrent protection.\n");
+	
+	return 0;
+}
+
+static void __exit usb_oc_protect_exit(void)
+{
+	del_timer_sync(&usb_timer);
+
+	if(usb_oc_proc_enable){
+		remove_proc_entry("enable", usb_oc_proc_enable);
+	}
+	#ifdef ZYXEL_USB_OC_FLAG_SUPPORT
+	if(usb_oc_proc_falg){
+		remove_proc_entry("flag", usb_oc_proc_falg);
+	}
+	#endif
+	if(usb_oc_proc_debug){
+		remove_proc_entry("debug", usb_oc_proc_debug);
+	}
+	if(usb_oc_proc_dir){
+		remove_proc_entry("usb_oc", usb_oc_proc_dir);
+	}
+}
+
+module_init(usb_oc_protect_init);
+module_exit(usb_oc_protect_exit);
