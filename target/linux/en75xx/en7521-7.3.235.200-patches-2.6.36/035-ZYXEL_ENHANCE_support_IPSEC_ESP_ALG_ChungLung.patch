Index: linux-2.6.36/include/linux/netfilter/nf_conntrack_ipsec.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.36/include/linux/netfilter/nf_conntrack_ipsec.h	2017-04-27 16:55:28.348819238 +0800
@@ -0,0 +1,43 @@
+/* IPSEC constants and structs */
+#ifndef _NF_CONNTRACK_IPSEC_H
+#define _NF_CONNTRACK_IPSEC_H
+
+#include <linux/netfilter/nf_conntrack_common.h>
+
+/* conntrack private data */
+struct nf_ct_ipsec_master 
+{
+   __be32 initcookie;  /* initcookie of ISAKMP */
+   __be32 lan_ip;        /* LAN IP */
+};
+
+struct nf_nat_ipsec 
+{
+   __be32 lan_ip;   /* LAN IP */
+};
+
+#ifdef __KERNEL__
+
+#define IPSEC_PORT   500
+#define MAX_VPN_CONNECTION 8  
+
+struct isakmp_pkt_hdr 
+{
+   __be32 initcookie;
+};
+
+
+/* crap needed for nf_conntrack_compat.h */
+struct nf_conn;
+struct nf_conntrack_expect;
+
+extern int
+(*nf_nat_ipsec_hook_outbound)(struct sk_buff *skb,
+                           struct nf_conn *ct, enum ip_conntrack_info ctinfo);
+
+extern int
+(*nf_nat_ipsec_hook_inbound)(struct sk_buff *skb, struct nf_conn *ct, 
+                             enum ip_conntrack_info ctinfo, __be32 lan_ip);
+
+#endif /* __KERNEL__ */
+#endif /* _NF_CONNTRACK_IPSEC_H */
Index: linux-2.6.36/include/linux/netfilter/nf_conntrack_proto_esp.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.36/include/linux/netfilter/nf_conntrack_proto_esp.h	2017-04-27 16:55:28.348819238 +0800
@@ -0,0 +1,20 @@
+#ifndef _CONNTRACK_PROTO_ESP_H
+#define _CONNTRACK_PROTO_ESP_H
+#include <asm/byteorder.h>
+
+/* ESP PROTOCOL HEADER */
+
+struct esphdr {
+	__u32	spi;
+};
+
+struct nf_ct_esp {
+	unsigned int stream_timeout;
+	unsigned int timeout;
+};
+
+#ifdef __KERNEL__
+#include <net/netfilter/nf_conntrack_tuple.h>
+
+#endif /* __KERNEL__ */
+#endif /* _CONNTRACK_PROTO_ESP_H */
Index: linux-2.6.36/include/net/netfilter/nf_conntrack.h
===================================================================
--- linux-2.6.36.orig/include/net/netfilter/nf_conntrack.h	2017-04-27 16:55:03.328819238 +0800
+++ linux-2.6.36/include/net/netfilter/nf_conntrack.h	2017-04-27 16:55:28.348819238 +0800
@@ -23,6 +23,7 @@
 #include <linux/netfilter/nf_conntrack_dccp.h>
 #include <linux/netfilter/nf_conntrack_sctp.h>
 #include <linux/netfilter/nf_conntrack_proto_gre.h>
+#include <linux/netfilter/nf_conntrack_proto_esp.h>
 #include <net/netfilter/ipv6/nf_conntrack_icmpv6.h>
 
 #include <net/netfilter/nf_conntrack_tuple.h>
@@ -34,6 +35,7 @@
 	struct ip_ct_sctp sctp;
 	struct ip_ct_tcp tcp;
 	struct nf_ct_gre gre;
+	struct nf_ct_esp esp;
 };
 
 union nf_conntrack_expect_proto {
@@ -46,6 +48,7 @@
 #include <linux/netfilter/nf_conntrack_h323.h>
 #include <linux/netfilter/nf_conntrack_sane.h>
 #include <linux/netfilter/nf_conntrack_sip.h>
+#include <linux/netfilter/nf_conntrack_ipsec.h>
 
 /* per conntrack: application helper private data */
 union nf_conntrack_help {
@@ -55,6 +58,7 @@
 	struct nf_ct_h323_master ct_h323_info;
 	struct nf_ct_sane_master ct_sane_info;
 	struct nf_ct_sip_master ct_sip_info;
+	struct nf_ct_ipsec_master ct_ipsec_info;
 };
 
 #include <linux/types.h>
Index: linux-2.6.36/include/net/netfilter/nf_conntrack_tuple.h
===================================================================
--- linux-2.6.36.orig/include/net/netfilter/nf_conntrack_tuple.h	2017-04-27 16:55:03.320819238 +0800
+++ linux-2.6.36/include/net/netfilter/nf_conntrack_tuple.h	2017-04-27 16:55:28.348819238 +0800
@@ -48,6 +48,9 @@
 	struct {
 		__be16 key;	/* GRE key is 32bit, PPtP only uses 16bit */
 	} gre;
+	struct {
+		__be16 spi;
+	} esp;
 };
 
 /* The manipulable part of the tuple. */
@@ -87,6 +90,9 @@
 			struct {
 				__be16 key;
 			} gre;
+			struct {
+				__be16 spi;
+			} esp;
 		} u;
 
 		/* The protocol. */
Index: linux-2.6.36/net/ipv4/netfilter/Kconfig
===================================================================
--- linux-2.6.36.orig/net/ipv4/netfilter/Kconfig	2017-04-27 16:55:03.292819238 +0800
+++ linux-2.6.36/net/ipv4/netfilter/Kconfig	2017-04-27 16:55:28.348819238 +0800
@@ -236,6 +236,11 @@
 	tristate
 	depends on NF_NAT && NF_CT_PROTO_GRE
 
+config NF_NAT_PROTO_ESP
+	tristate
+	depends on NF_NAT && NF_CT_PROTO_ESP
+	default NF_NAT && NF_CT_PROTO_ESP
+
 config NF_NAT_PROTO_UDPLITE
 	tristate
 	depends on NF_NAT && NF_CT_PROTO_UDPLITE
@@ -297,6 +302,11 @@
 	depends on NF_CONNTRACK && NF_NAT
 	default NF_NAT && NF_CONNTRACK_SIP
 
+config NF_NAT_IPSEC
+	tristate
+	depends on NF_CONNTRACK && NF_NAT
+	default NF_NAT && NF_CONNTRACK_IPSEC
+
 # mangle + specific targets
 config IP_NF_MANGLE
 	tristate "Packet mangling"
Index: linux-2.6.36/net/ipv4/netfilter/Makefile
===================================================================
--- linux-2.6.36.orig/net/ipv4/netfilter/Makefile	2017-04-27 16:55:03.304819238 +0800
+++ linux-2.6.36/net/ipv4/netfilter/Makefile	2017-04-27 16:55:28.348819238 +0800
@@ -31,11 +31,13 @@
 obj-$(CONFIG_NF_NAT_SNMP_BASIC) += nf_nat_snmp_basic.o
 obj-$(CONFIG_NF_NAT_TFTP) += nf_nat_tftp.o
 obj-$(CONFIG_NF_NAT_RTSP) += nf_nat_rtsp.o
+obj-$(CONFIG_NF_NAT_IPSEC) += nf_nat_ipsec.o
 obj-$(CONFIG_NF_NAT_PT) += nf_nat_pt.o
 
 # NAT protocols (nf_nat)
 obj-$(CONFIG_NF_NAT_PROTO_DCCP) += nf_nat_proto_dccp.o
 obj-$(CONFIG_NF_NAT_PROTO_GRE) += nf_nat_proto_gre.o
+obj-$(CONFIG_NF_NAT_PROTO_ESP) += nf_nat_proto_esp.o
 obj-$(CONFIG_NF_NAT_PROTO_UDPLITE) += nf_nat_proto_udplite.o
 obj-$(CONFIG_NF_NAT_PROTO_SCTP) += nf_nat_proto_sctp.o
 
Index: linux-2.6.36/net/ipv4/netfilter/nf_nat_ipsec.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.36/net/ipv4/netfilter/nf_nat_ipsec.c	2017-04-27 16:55:28.348819238 +0800
@@ -0,0 +1,97 @@
+/*
+<:copyright-gpl
+ Copyright 2010 Broadcom Corp. All Rights Reserved.
+
+ This program is free software; you can distribute it and/or modify it
+ under the terms of the GNU General Public License (Version 2) as
+ published by the Free Software Foundation.
+
+ This program is distributed in the hope it will be useful, but WITHOUT
+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ for more details.
+
+ You should have received a copy of the GNU General Public License along
+ with this program; if not, write to the Free Software Foundation, Inc.,
+ 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+:>
+*/
+
+#include <linux/module.h>
+#include <linux/udp.h>
+#include <linux/ip.h>
+
+#include <net/netfilter/nf_nat.h>
+#include <net/netfilter/nf_nat_helper.h>
+#include <net/netfilter/nf_nat_rule.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <net/netfilter/nf_conntrack_expect.h>
+#include <linux/netfilter/nf_conntrack_ipsec.h>
+
+MODULE_AUTHOR("Pavan Kumar <pavank@broadcom.com>");
+MODULE_DESCRIPTION("Netfilter connection tracking module for ipsec");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("nf_nat_ipsec");
+
+#if 0
+#define DEBUGP(format, args...) printk(KERN_DEBUG "%s:%s: " format, __FILE__, \
+				       __FUNCTION__, ## args)
+#else
+#define DEBUGP(format, args...)
+#endif
+
+
+/* outbound packets == from LAN to WAN */
+static int
+ipsec_outbound_pkt(struct sk_buff *skb,
+                   struct nf_conn *ct, enum ip_conntrack_info ctinfo)
+
+{
+   struct iphdr *iph = ip_hdr(skb);
+   struct udphdr *udph = (void *)iph + iph->ihl * 4;
+
+   /* make sure source port is 500 */
+   udph->source = htons(IPSEC_PORT);
+   udph->check = 0;
+   
+   return NF_ACCEPT;
+}
+
+
+/* inbound packets == from WAN to LAN */
+static int
+ipsec_inbound_pkt(struct sk_buff *skb, struct nf_conn *ct,
+                  enum ip_conntrack_info ctinfo, __be32 lan_ip)
+{
+   struct iphdr *iph = ip_hdr(skb);
+   struct udphdr *udph = (void *)iph + iph->ihl * 4;
+
+   iph->daddr = lan_ip;
+   udph->check = 0;
+   iph->check = 0;
+   iph->check = ip_fast_csum((unsigned char *)iph, iph->ihl);
+   
+   return NF_ACCEPT;
+}
+
+static int __init nf_nat_helper_ipsec_init(void)
+{
+printk("@@@%s:%d\r\n",__FUNCTION__, __LINE__);
+   BUG_ON(rcu_dereference(nf_nat_ipsec_hook_outbound));
+   rcu_assign_pointer(nf_nat_ipsec_hook_outbound, ipsec_outbound_pkt);
+
+   BUG_ON(rcu_dereference(nf_nat_ipsec_hook_inbound));
+   rcu_assign_pointer(nf_nat_ipsec_hook_inbound, ipsec_inbound_pkt);
+
+   return 0;
+}
+
+static void __exit nf_nat_helper_ipsec_fini(void)
+{
+   rcu_assign_pointer(nf_nat_ipsec_hook_inbound, NULL);
+   rcu_assign_pointer(nf_nat_ipsec_hook_outbound, NULL);
+   synchronize_rcu();
+}
+
+module_init(nf_nat_helper_ipsec_init);
+module_exit(nf_nat_helper_ipsec_fini);
Index: linux-2.6.36/net/ipv4/netfilter/nf_nat_proto_esp.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.36/net/ipv4/netfilter/nf_nat_proto_esp.c	2017-04-27 16:55:28.348819238 +0800
@@ -0,0 +1,110 @@
+/*
+<:copyright-gpl
+ Copyright 2008 Broadcom Corp. All Rights Reserved.
+
+ This program is free software; you can distribute it and/or modify it
+ under the terms of the GNU General Public License (Version 2) as
+ published by the Free Software Foundation.
+
+ This program is distributed in the hope it will be useful, but WITHOUT
+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ for more details.
+
+ You should have received a copy of the GNU General Public License along
+ with this program; if not, write to the Free Software Foundation, Inc.,
+ 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+:>
+*/
+/******************************************************************************
+Filename:       nf_nat_proto_esp.c
+Author:         Pavan Kumar
+Creation Date:  05/27/04
+
+Description:
+    Implements the ESP ALG connectiontracking.
+    Migrated to kernel 2.6.21.5 on April 16, 2008 by Dan-Han Tsai.
+*****************************************************************************/
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+
+#include <net/netfilter/nf_nat.h>
+#include <net/netfilter/nf_nat_rule.h>
+#include <net/netfilter/nf_nat_protocol.h>
+#include <linux/netfilter/nf_conntrack_proto_esp.h>
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Harald Welte <laforge@gnumonks.org>");
+MODULE_DESCRIPTION("Netfilter NAT protocol helper module for ESP");
+
+/* is spi in given range between min and max */
+static bool
+esp_in_range(const struct nf_conntrack_tuple *tuple,
+	     enum nf_nat_manip_type maniptype,
+	     const union nf_conntrack_man_proto *min,
+	     const union nf_conntrack_man_proto *max)
+{
+   return true;
+}
+
+/* generate unique tuple ... */
+static void
+esp_unique_tuple(struct nf_conntrack_tuple *tuple,
+				const struct nf_nat_range *range,
+                 enum nf_nat_manip_type maniptype,
+                 const struct nf_conn *conntrack)
+{
+   return;
+}
+
+/* manipulate a ESP packet according to maniptype */
+static bool
+esp_manip_pkt(struct sk_buff *skb, unsigned int iphdroff,
+              const struct nf_conntrack_tuple *tuple,
+              enum nf_nat_manip_type maniptype)
+{
+   struct esphdr *esph;
+   struct iphdr *iph = (struct iphdr *)(skb->data + iphdroff);
+//   struct iphdr *iph = ip_hdr(*pskb);
+   unsigned int hdroff = iphdroff + iph->ihl * 4;
+   __be32 oldip, newip;
+
+   if (!skb_make_writable(skb, hdroff + sizeof(*esph)))
+      return false;
+
+   if (maniptype == IP_NAT_MANIP_SRC)
+   {
+      /* Get rid of src ip and src pt */
+      oldip = iph->saddr;
+      newip = tuple->src.u3.ip;
+   } 
+   else 
+   {
+      /* Get rid of dst ip and dst pt */
+      oldip = iph->daddr;
+      newip = tuple->dst.u3.ip;
+   }
+
+   return true;
+}
+
+const struct nf_nat_protocol esp __read_mostly = {
+   .protonum = IPPROTO_ESP,
+   .manip_pkt = esp_manip_pkt,
+   .in_range = esp_in_range,
+   .unique_tuple = esp_unique_tuple,
+};
+
+int __init nf_nat_proto_esp_init(void)
+{
+   return nf_nat_protocol_register(&esp);
+}
+
+void __exit nf_nat_proto_esp_fini(void)
+{
+   nf_nat_protocol_unregister(&esp);
+}
+
+module_init(nf_nat_proto_esp_init);
+module_exit(nf_nat_proto_esp_fini);
Index: linux-2.6.36/net/netfilter/Kconfig
===================================================================
--- linux-2.6.36.orig/net/netfilter/Kconfig	2017-04-27 16:55:03.264819238 +0800
+++ linux-2.6.36/net/netfilter/Kconfig	2017-04-27 16:55:28.348819238 +0800
@@ -99,6 +99,16 @@
 config NF_CT_PROTO_GRE
 	tristate
 
+config NF_CT_PROTO_ESP
+	tristate "ESP protocol support"
+	depends on NF_CONNTRACK
+	help
+	  Support the ESP protocol.  This allows ESP transports to be setup 
+	  properly.
+
+	  If you want to compile it as a module, say 'M' here and read
+	  Documentation/modules.txt.  If unsure, say 'Y'.
+
 config NF_CT_PROTO_SCTP
 	tristate 'SCTP protocol connection tracking support (EXPERIMENTAL)'
 	depends on EXPERIMENTAL
@@ -270,6 +280,13 @@
  	  If you want to compile it as a module, say 'M' here and read       
  	  Documentation/modules.txt.  If unsure, say 'Y'.
 
+config NF_CONNTRACK_IPSEC
+	tristate "IPSEC protocol support"
+	depends on NF_CONNTRACK 
+	help
+	  Support the IPSEC protocol.  This allows UDP transports to be setup
+	  properly.
+
 config NF_CT_NETLINK
 	tristate 'Connection tracking netlink interface'
 	select NETFILTER_NETLINK
Index: linux-2.6.36/net/netfilter/Makefile
===================================================================
--- linux-2.6.36.orig/net/netfilter/Makefile	2017-04-27 16:55:03.280819238 +0800
+++ linux-2.6.36/net/netfilter/Makefile	2017-04-27 16:55:28.348819238 +0800
@@ -15,6 +15,7 @@
 # SCTP protocol connection tracking
 obj-$(CONFIG_NF_CT_PROTO_DCCP) += nf_conntrack_proto_dccp.o
 obj-$(CONFIG_NF_CT_PROTO_GRE) += nf_conntrack_proto_gre.o
+obj-$(CONFIG_NF_CT_PROTO_ESP) += nf_conntrack_proto_esp.o
 obj-$(CONFIG_NF_CT_PROTO_SCTP) += nf_conntrack_proto_sctp.o
 obj-$(CONFIG_NF_CT_PROTO_UDPLITE) += nf_conntrack_proto_udplite.o
 
@@ -34,6 +35,7 @@
 obj-$(CONFIG_NF_CONNTRACK_SIP) += nf_conntrack_sip.o
 obj-$(CONFIG_NF_CONNTRACK_TFTP) += nf_conntrack_tftp.o
 obj-$(CONFIG_NF_CONNTRACK_RTSP) += nf_conntrack_rtsp.o
+obj-$(CONFIG_NF_CONNTRACK_IPSEC) += nf_conntrack_ipsec.o
 
 # transparent proxy support
 obj-$(CONFIG_NETFILTER_TPROXY) += nf_tproxy_core.o
Index: linux-2.6.36/net/netfilter/nf_conntrack_ipsec.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.36/net/netfilter/nf_conntrack_ipsec.c	2017-04-27 16:55:28.348819238 +0800
@@ -0,0 +1,361 @@
+/*
+<:copyright-gpl
+ Copyright 2010 Broadcom Corp. All Rights Reserved.
+
+ This program is free software; you can distribute it and/or modify it
+ under the terms of the GNU General Public License (Version 2) as
+ published by the Free Software Foundation.
+
+ This program is distributed in the hope it will be useful, but WITHOUT
+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ for more details.
+
+ You should have received a copy of the GNU General Public License along
+ with this program; if not, write to the Free Software Foundation, Inc.,
+ 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+:>
+*/
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/in.h>
+#include <linux/tcp.h>
+#include <linux/ip.h>
+
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_core.h>
+#include <net/netfilter/nf_conntrack_expect.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <linux/netfilter/nf_conntrack_ipsec.h>
+
+MODULE_AUTHOR("Pavan Kumar <pavank@broadcom.com>");
+MODULE_DESCRIPTION("Netfilter connection tracking module for ipsec");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ip_conntrack_ipsec");
+
+static DEFINE_SPINLOCK(nf_ipsec_lock);
+
+int
+(*nf_nat_ipsec_hook_outbound)(struct sk_buff *skb,
+      struct nf_conn *ct, enum ip_conntrack_info ctinfo) __read_mostly;
+EXPORT_SYMBOL_GPL(nf_nat_ipsec_hook_outbound);
+
+int
+(*nf_nat_ipsec_hook_inbound)(struct sk_buff *skb,
+      struct nf_conn *ct, enum ip_conntrack_info ctinfo, __be32 lan_ip) __read_mostly;
+EXPORT_SYMBOL_GPL(nf_nat_ipsec_hook_inbound);
+
+struct sk_buff nfskb_p;
+
+#if 0
+#include <net/inet_sock.h>
+#define DEBUGP(format, args...)	printk(KERN_DEBUG "%s:%s: " format, __FILE__, __FUNCTION__, ## args)
+#else
+#define DEBUGP(format, args...)
+#endif
+
+#define REFRESH_TIMEOUT    (10 * HZ)
+#define CT_REFRESH_TIMEOUT (13 * HZ)
+#define CT_15MIN_TIME      (60 * HZ * 15)
+#define MAX_TIMEOUT_COUNT  ((CT_15MIN_TIME)/REFRESH_TIMEOUT)
+
+/* Internal table for ISAKMP */
+struct _ipsec_table 
+{
+   u_int32_t initcookie;
+   __be32 lan_ip;
+   struct nf_conn *ct;
+   struct timer_list refresh_timer;
+   int pkt_rcvd;
+   int ntimeouts;
+   int inuse;
+} ipsec_table[MAX_VPN_CONNECTION];
+
+static void ipsec_free_entry(unsigned long index)
+{
+   if( ipsec_table[index].inuse ) 
+   {
+      del_timer(&ipsec_table[index].refresh_timer);
+      memset(&ipsec_table[index], 0, sizeof(struct _ipsec_table));
+   }
+
+   DEBUGP("try to free ipsec_table[%ld] which is not in use\n", index);
+}
+
+static void ipsec_refresh_ct(unsigned long data)
+{
+//   int i;
+   struct _ipsec_table *ipsec_entry = NULL;
+
+   if( data > MAX_VPN_CONNECTION )
+      return;
+
+   ipsec_entry = &ipsec_table[data];
+
+   DEBUGP( "ntimeouts %d pkt_rcvd %d entry %p data %lu ct %p\n",
+          ipsec_entry->ntimeouts, ipsec_entry->pkt_rcvd, ipsec_entry, data,
+          ipsec_entry->ct);
+
+   if( ipsec_entry->pkt_rcvd ) 
+   {
+      ipsec_entry->pkt_rcvd = 0;
+      ipsec_entry->ntimeouts = 0;
+   } 
+   else 
+   {
+      ipsec_entry->ntimeouts++;
+      if( ipsec_entry->ntimeouts >= MAX_TIMEOUT_COUNT )
+      {
+         ipsec_free_entry(data);
+         return;
+      }
+   }
+   ipsec_entry->refresh_timer.expires = jiffies + REFRESH_TIMEOUT;
+   nfskb_p.nfct = (struct nf_conntrack *)ipsec_entry->ct;
+   nf_ct_refresh_acct(ipsec_entry->ct, 0, &nfskb_p, CT_REFRESH_TIMEOUT);
+   add_timer(&ipsec_entry->refresh_timer);
+#if 0
+   for( i=0;i<MAX_VPN_CONNECTION;i++ )
+      if( ipsec_table[i].inuse )
+         printk("table %d with lanIP %u.%u.%u.%u is inuse\n", i, NIPQUAD(ipsec_table[i].lan_ip));
+#endif
+}
+
+static struct _ipsec_table *ipsec_alloc_entry(int *index)
+{
+   int idx = 0;
+
+   for( ; idx < MAX_VPN_CONNECTION; idx++ ) 
+   {
+      if( ipsec_table[idx].inuse )
+         continue;
+   
+      *index = idx;
+      memset(&ipsec_table[idx], 0, sizeof(struct _ipsec_table));
+      init_timer( &ipsec_table[idx].refresh_timer );
+      ipsec_table[idx].refresh_timer.expires = jiffies + REFRESH_TIMEOUT;
+      ipsec_table[idx].refresh_timer.function = ipsec_refresh_ct;
+      ipsec_table[idx].refresh_timer.data = (unsigned long)idx;
+      add_timer( &ipsec_table[idx].refresh_timer );      
+
+      return (&ipsec_table[idx]);
+   }
+   
+   return NULL;
+}
+
+/*
+ * Search an IPSEC table entry by the initiator cookie.
+ */
+struct _ipsec_table *
+search_ipsec_entry_by_cookie(struct isakmp_pkt_hdr *isakmph)
+{
+   int idx = 0;
+   struct _ipsec_table *ipsec_entry = ipsec_table;
+
+   for( ; idx < MAX_VPN_CONNECTION; idx++ ) 
+   {
+      DEBUGP("Searching initcookie %x <-> %x\n",
+          ntohl(isakmph->initcookie), ntohl(ipsec_entry->initcookie));
+      
+      if( isakmph->initcookie == ipsec_entry->initcookie ) 
+         return ipsec_entry;
+      
+      ipsec_entry++;
+   }
+   
+   return NULL;
+}
+
+/*
+ * Search an IPSEC table entry by the source IP address.
+ */
+struct _ipsec_table *
+search_ipsec_entry_by_addr(const __be32 lan_ip, int *index)
+{
+   int idx = 0;
+   struct _ipsec_table *ipsec_entry = ipsec_table;
+
+   for( ; idx < MAX_VPN_CONNECTION; idx++ ) 
+   {
+      DEBUGP("Looking up lan_ip=%u.%u.%u.%u table entry %u.%u.%u.%u\n", 
+              NIPQUAD(lan_ip), NIPQUAD(ipsec_entry->lan_ip));
+
+      if( ntohl(ipsec_entry->lan_ip) == ntohl(lan_ip) ) 
+      {
+         DEBUGP("Search by addr returning entry %p\n", ipsec_entry);
+
+         *index = idx;
+         return ipsec_entry;
+      }
+      ipsec_entry++;
+   }
+   
+   return NULL;
+}
+
+static inline int
+ipsec_inbound_pkt(struct sk_buff *skb, struct nf_conn *ct, 
+		  enum ip_conntrack_info ctinfo, __be32 lan_ip)
+{
+//   struct nf_ct_ipsec_master *info = &nfct_help(ct)->help.ct_ipsec_info;
+   typeof(nf_nat_ipsec_hook_inbound) nf_nat_ipsec_inbound;
+
+   DEBUGP("inbound ISAKMP packet for LAN %u.%u.%u.%u\n", NIPQUAD(lan_ip));
+
+   nf_nat_ipsec_inbound = rcu_dereference(nf_nat_ipsec_hook_inbound);
+   if (nf_nat_ipsec_inbound && ct->status & IPS_NAT_MASK)
+      return nf_nat_ipsec_inbound(skb, ct, ctinfo, lan_ip);
+   
+   return NF_ACCEPT;
+}
+
+/*
+ * For outgoing ISAKMP packets, we need to make sure UDP ports=500
+ */
+static inline int
+ipsec_outbound_pkt(struct sk_buff *skb,
+                   struct nf_conn *ct, enum ip_conntrack_info ctinfo)
+{
+   typeof(nf_nat_ipsec_hook_outbound) nf_nat_ipsec_outbound;
+
+   DEBUGP("outbound ISAKMP packet\n");
+
+   nf_nat_ipsec_outbound = rcu_dereference(nf_nat_ipsec_hook_outbound);
+   if( nf_nat_ipsec_outbound && ct->status & IPS_NAT_MASK )
+      return nf_nat_ipsec_outbound(skb, ct, ctinfo);
+   
+   return NF_ACCEPT;
+}
+
+
+/* track cookies inside ISAKMP, call expect_related */
+static int conntrack_ipsec_help(struct sk_buff *skb, unsigned int protoff,
+                             struct nf_conn *ct, enum ip_conntrack_info ctinfo)
+{
+   int dir = CTINFO2DIR(ctinfo);
+   struct nf_ct_ipsec_master *info = &nfct_help(ct)->help.ct_ipsec_info;
+//   struct iphdr *iph = (*pskb)->nh.iph;
+   struct isakmp_pkt_hdr _isakmph, *isakmph;
+   struct _ipsec_table *ipsec_entry = ipsec_table;
+   unsigned int nexthdr_off;
+   int ret, index=0;
+
+   nexthdr_off = protoff + 8;   /* UDP header length = 8 */
+
+   isakmph = skb_header_pointer(skb, nexthdr_off, 
+                                sizeof(_isakmph), &_isakmph);
+   if( !isakmph ) 
+   {
+      DEBUGP("no full ISAKMP header, can't track\n");
+      return NF_ACCEPT;
+   }
+
+   spin_lock_bh(&nf_ipsec_lock);
+
+   if( dir == IP_CT_DIR_ORIGINAL )
+   {
+      int lan_ip = ct->tuplehash[dir].tuple.src.u3.ip;
+      DEBUGP("LAN -> WAN: old cookies:%x new cookies:%x, src: %u.%u.%u.%u, dst: %u.%u.%u.%u\n",
+              ntohl(info->initcookie), ntohl(isakmph->initcookie),
+	      NIPQUAD(ct->tuplehash[dir].tuple.src.u3.ip), 
+	      NIPQUAD(ct->tuplehash[dir].tuple.dst.u3.ip) );
+      
+      /* create one entry in the internal table if a new connection is found */
+      if( (ipsec_entry = search_ipsec_entry_by_cookie(isakmph)) == NULL ) 
+      {
+         /* NOTE: cookies may be updated in the connection */
+         if( (ipsec_entry = 
+              search_ipsec_entry_by_addr(lan_ip, &index)) == NULL ) 
+         {
+            ipsec_entry = ipsec_alloc_entry(&index);
+            if( ipsec_entry == NULL ) 
+            {
+               /* All entries are currently in use */
+               DEBUGP("%s:%s Out of table entries\n", __FILE__, __FUNCTION__);
+               spin_unlock_bh(&nf_ipsec_lock);
+               return NF_DROP;
+            }
+            
+            ipsec_entry->lan_ip = ct->tuplehash[dir].tuple.src.u3.ip;
+            ipsec_entry->inuse = 1;
+         }
+         /* Update our cookie information */
+         ipsec_entry->initcookie = isakmph->initcookie;
+         ipsec_entry->ct = ct;
+
+         DEBUGP("create a new ipsec_entry with ct=%p, lan_ip=%u.%u.%u.%u, initcookie=%x\n", 
+            ipsec_entry->ct, NIPQUAD(ipsec_entry->lan_ip), 
+            ntohl(ipsec_entry->initcookie) );
+      }
+      ipsec_entry->pkt_rcvd++;
+
+      info->initcookie = isakmph->initcookie;
+      info->lan_ip = ct->tuplehash[dir].tuple.src.u3.ip;
+
+      DEBUGP("ct_ipsec_info => initcookie=%x, lan_ip=%u.%u.%u.%u, ct->tuplehash[%d].tuple.src.u3.ip=%u.%u.%u.%u, ct->tuplehash[%d].tuple.dst.u3.ip=%u.%u.%u.%u\n\n", 
+              info->initcookie, NIPQUAD(info->lan_ip), 
+              dir, NIPQUAD(ct->tuplehash[dir].tuple.src.u3.ip), 
+              dir, NIPQUAD(ct->tuplehash[dir].tuple.dst.u3.ip));
+      
+      ret = ipsec_outbound_pkt(skb, ct, ctinfo); 
+   }
+   else
+   {
+      DEBUGP("WAN->LAN\n");
+      
+      if( (ipsec_entry = search_ipsec_entry_by_cookie(isakmph)) != NULL )
+      {
+         ipsec_entry->pkt_rcvd++;
+         ret = ipsec_inbound_pkt(skb, ct, ctinfo, ipsec_entry->lan_ip);
+      }
+      else
+      {
+         DEBUGP("WARNNING: client from WAN tries to connect to VPN server in the LAN\n");
+         ret = NF_ACCEPT;
+      }
+   }
+
+   spin_unlock_bh(&nf_ipsec_lock);
+
+   return ret;
+}
+
+/* ISAKMP protocol helper */
+static struct nf_conntrack_expect_policy ipsec_exp_policy = {
+   .max_expected = 1,
+   .timeout = 300,
+};
+
+static struct nf_conntrack_helper ipsec __read_mostly = {
+   .name = "ipsec",
+   .me = THIS_MODULE,
+   .tuple.src.l3num = AF_INET,
+   .tuple.dst.protonum = IPPROTO_UDP,
+   .tuple.src.u.udp.port = __constant_htons(IPSEC_PORT),
+//   .mask.src.l3num = 0xffff,
+//   .mask.dst.protonum = 0xff,
+//   .mask.src.u.udp.port	= __constant_htons(0xffff),
+   .help = conntrack_ipsec_help,
+   .expect_policy = &ipsec_exp_policy,
+};
+
+static int __init nf_conntrack_ipsec_init(void)
+{
+   return nf_conntrack_helper_register(&ipsec);
+}
+
+static void __exit nf_conntrack_ipsec_fini(void)
+{
+   int idx = 0;
+
+   for( ; idx < MAX_VPN_CONNECTION; idx++ )
+      if( ipsec_table[idx].inuse )
+         del_timer(&ipsec_table[idx].refresh_timer);
+
+   nf_conntrack_helper_unregister(&ipsec);
+}
+
+module_init(nf_conntrack_ipsec_init);
+module_exit(nf_conntrack_ipsec_fini);
Index: linux-2.6.36/net/netfilter/nf_conntrack_proto_esp.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.36/net/netfilter/nf_conntrack_proto_esp.c	2017-04-27 16:55:28.352819238 +0800
@@ -0,0 +1,405 @@
+/*
+<:copyright-gpl
+ Copyright 2008 Broadcom Corp. All Rights Reserved.
+
+ This program is free software; you can distribute it and/or modify it
+ under the terms of the GNU General Public License (Version 2) as
+ published by the Free Software Foundation.
+
+ This program is distributed in the hope it will be useful, but WITHOUT
+ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ for more details.
+
+ You should have received a copy of the GNU General Public License along
+ with this program; if not, write to the Free Software Foundation, Inc.,
+ 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+:>
+*/
+/******************************************************************************
+ Filename:       nf_conntrack_proto_esp.c
+ Author:         Pavan Kumar
+ Creation Date:  05/27/04
+
+ Description:
+  Implements the ESP ALG connectiontracking.
+  Migrated to kernel 2.6.21.5 on April 16, 2008 by Dan-Han Tsai.
+*****************************************************************************/
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/timer.h>
+#include <linux/list.h>
+#include <linux/seq_file.h>
+#include <linux/in.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+
+#include <net/netfilter/nf_conntrack_l4proto.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <net/netfilter/nf_conntrack_core.h>
+#include <linux/netfilter/nf_conntrack_proto_esp.h>
+
+#if 1
+#define DEBUGP(format, args...)	printk(KERN_DEBUG "%s: " format, __FUNCTION__, ## args)
+#else
+#define DEBUGP(x, args...)
+#endif
+
+#define ESP_REF_TMOUT   (30 * HZ)
+#define ESP_CONN_TMOUT  (60 * HZ * 6)
+#define ESP_TMOUT_COUNT (ESP_CONN_TMOUT/ESP_REF_TMOUT)
+#define ESP_STREAM_TIMEOUT (6000 * HZ)
+#define ESP_TIMEOUT (3000 * HZ)
+
+#define IPSEC_INUSE    1
+#define MAX_PORTS      64
+#define TEMP_SPI_START 1500
+
+struct _esp_table 
+{
+   u_int32_t l_spi;
+   u_int32_t r_spi;
+   u_int32_t l_ip;
+   u_int32_t r_ip;
+   u_int32_t timeout;
+   u_int16_t tspi;
+   struct nf_conn *ct;
+   struct timer_list refresh_timer;
+   int    pkt_rcvd;
+   int    ntimeouts;
+   int    inuse;
+};
+
+static struct _esp_table esp_table[MAX_PORTS];
+static struct sk_buff nfskb_p;
+
+static void esp_free_entry( int index )
+{
+   if( esp_table[index].inuse ) 
+   {
+      DEBUGP( "   %s Deleting timer index %d\n", 
+               __FUNCTION__, index);
+      del_timer(&esp_table[index].refresh_timer);
+      memset(&esp_table[index], 0, sizeof(struct _esp_table));
+   }
+}
+
+static void esp_refresh_ct( unsigned long data )
+{
+   struct _esp_table *esp_entry = NULL;
+
+   if( data > MAX_PORTS ) 
+      return;
+
+   if( (esp_entry = &esp_table[data]) == NULL )
+      return;
+
+   DEBUGP( "   ntimeouts %d pkt_rcvd %d entry %p data %lu ct %p spi [0x%x - 0x%x] %u.%u.%u.%u <-> %u.%u.%u.%u\n", 
+         esp_entry->ntimeouts, esp_entry->pkt_rcvd, esp_entry, data, esp_entry->ct, esp_entry->l_spi, esp_entry->r_spi, NIPQUAD(esp_entry->l_ip), NIPQUAD(esp_entry->r_ip));
+
+   if( esp_entry->pkt_rcvd )
+   {
+      esp_entry->pkt_rcvd  = 0;
+      esp_entry->ntimeouts = 0;
+   } 
+   else 
+   {
+      esp_entry->ntimeouts++;
+      if( esp_entry->ntimeouts >= ESP_TMOUT_COUNT )
+      {
+         esp_free_entry(data);
+         return;
+      }
+   }
+   if( esp_entry->ct )
+   {
+      esp_entry->refresh_timer.expires = jiffies + ESP_REF_TMOUT;
+      esp_entry->refresh_timer.function = esp_refresh_ct;
+      esp_entry->refresh_timer.data = data;
+      nfskb_p.nfct = (struct nf_conntrack *)esp_entry->ct;
+      nf_ct_refresh_acct(esp_entry->ct, 0, &nfskb_p, ESP_CONN_TMOUT);
+      add_timer(&esp_entry->refresh_timer);
+   }
+}
+
+/*
+ * Allocate a free IPSEC table entry.
+ */
+struct _esp_table *alloc_esp_entry( void )
+{
+   int idx = 0;
+
+   for( ; idx < MAX_PORTS; idx++ )
+   {
+      if( esp_table[idx].inuse == IPSEC_INUSE )
+         continue;
+
+      memset(&esp_table[idx], 0, sizeof(struct _esp_table));
+      esp_table[idx].tspi  = idx + TEMP_SPI_START;
+      esp_table[idx].inuse = IPSEC_INUSE;
+
+      DEBUGP( "   %s New esp_entry at idx %d tspi %u \n", 
+         __FUNCTION__, idx, esp_table[idx].tspi );
+
+      init_timer(&esp_table[idx].refresh_timer);
+      esp_table[idx].refresh_timer.data = idx;
+      esp_table[idx].refresh_timer.expires = jiffies + ESP_REF_TMOUT;
+      esp_table[idx].refresh_timer.function = esp_refresh_ct;
+      add_timer(&esp_table[idx].refresh_timer);
+      return (&esp_table[idx]);
+   }
+   return NULL;
+}
+
+/*
+ * Search an ESP table entry by source IP.
+ * If found one, update the spi value
+ */
+struct _esp_table *search_esp_entry_by_ip( const struct nf_conntrack_tuple *tuple, const __u32 spi )
+{
+   int idx = 0;
+   __u32 srcIP = tuple->src.u3.ip;
+   __u32 dstIP = tuple->dst.u3.ip;
+   struct _esp_table *esp_entry = esp_table;
+
+   for( ; idx < MAX_PORTS; idx++, esp_entry++ )
+   {
+      DEBUGP("   Searching IP %u.%u.%u.%u <-> %u.%u.%u.%u,  %u.%u.%u.%u\n",
+          NIPQUAD(srcIP), NIPQUAD(esp_entry->l_ip), 
+          NIPQUAD(esp_entry->r_ip));
+      
+      /* make sure l_ip is LAN IP */
+      if( (srcIP == esp_entry->l_ip) && (((unsigned char *)&(srcIP))[0] == 192) )
+      {
+         DEBUGP("   found entry with l_ip\n");
+         esp_entry->l_spi = spi;
+
+         /* This is a new connection of the same LAN host */
+         if( dstIP != esp_entry->r_ip )
+         {
+            esp_entry->r_ip = dstIP;
+            esp_entry->r_spi = 0;
+         }
+         return esp_entry;
+      }
+      else if( srcIP == esp_entry->r_ip )
+      {
+         DEBUGP("   found entry with r_ip\n");
+         /* FIXME */
+         if( esp_entry->r_spi == 0 )
+         {
+            DEBUGP("   found entry with r_ip and r_spi == 0\n");
+            esp_entry->r_spi = spi;
+            return esp_entry;
+         }
+	 /* We cannot handle spi changed at WAN side */
+         DEBUGP("   found entry with r_ip but r_spi != 0\n");
+      }
+   }
+   DEBUGP( "   %s No Entry\n", __FUNCTION__);
+   return NULL;
+}
+
+/*
+ * Search an ESP table entry by spi
+ */
+struct _esp_table *search_esp_entry_by_spi( const __u32 spi, const __u32 srcIP )
+{
+   int idx = 0;
+   struct _esp_table *esp_entry = esp_table;
+
+   for( ; idx < MAX_PORTS; idx++, esp_entry++ )
+   {
+      DEBUGP("   Searching spi %x <-> %x, %x\n",
+          spi, esp_entry->l_spi, esp_entry->r_spi);
+      
+      if( (spi == esp_entry->l_spi) || (spi == esp_entry->r_spi) )
+      {
+         DEBUGP("   In %s, found entry %d with tspi %u\n",
+                  __FUNCTION__, idx, esp_entry->tspi);
+
+         /* l_spi and r_spi may be the same */
+         if( (spi == esp_entry->l_spi) && (srcIP == esp_entry->r_ip) )
+	 {
+            DEBUGP("  In %s, l_spi==r_spi\n",  __FUNCTION__);
+            esp_entry->r_spi = spi;
+	 }
+
+         return esp_entry;
+      }
+   }
+   DEBUGP( "   %s No Entry\n", __FUNCTION__);
+   return NULL;
+
+}
+
+/* invert esp part of tuple */
+static int esp_invert_tuple(struct nf_conntrack_tuple *tuple,
+			    const struct nf_conntrack_tuple *orig)
+{
+   DEBUGP("%s with spi = 0x%u\n",  __FUNCTION__, orig->src.u.esp.spi);
+   tuple->dst.u.esp.spi = orig->dst.u.esp.spi;
+   tuple->src.u.esp.spi = orig->src.u.esp.spi;
+   return 1;
+}
+
+/* esp hdr info to tuple */
+static int esp_pkt_to_tuple(const struct sk_buff *skb, unsigned int dataoff,
+                            struct nf_conntrack_tuple *tuple)
+{
+   struct esphdr _esphdr, *esphdr;
+   struct _esp_table *esp_entry = NULL;
+
+   esphdr = skb_header_pointer(skb, dataoff, sizeof(_esphdr), &_esphdr);
+   if( !esphdr ) 
+   {
+      /* try to behave like "nf_conntrack_proto_generic" */
+      tuple->src.u.all = 0;
+      tuple->dst.u.all = 0;
+      return 1;
+   }
+
+   DEBUGP("Enter pkt_to_tuple() with spi %x\n", esphdr->spi);
+   /* check if esphdr has a new SPI:
+    *   if no, update tuple with correct tspi and increment pkt count;
+    *   if yes, check if we have seen the source IP:
+    *             if yes, do the tspi and pkt count update
+    *             if no, create a new entry
+    */
+   if( (esp_entry = search_esp_entry_by_spi(esphdr->spi, tuple->src.u3.ip)) == NULL ) 
+   {
+      if( (esp_entry = 
+           search_esp_entry_by_ip(tuple, esphdr->spi)) == NULL )
+      {
+#if 0
+         /* Because SA is simplex, it's possible that WAN starts connection first. 
+	  * We need to make sure that the connection starts from LAN.
+	  */
+         if( ((unsigned char *)&(tuple->src.u3.ip))[0] != 192 )
+	 {
+ 	      DEBUGP("srcIP %u.%u.%u.%u is WAN IP, DROP packet\n", NIPQUAD(tuple->src.u3.ip));
+	      return 0;
+	 }
+#endif
+         esp_entry = alloc_esp_entry();
+         if( esp_entry == NULL ) 
+         {
+            DEBUGP( "%s All entries in use\n", __FUNCTION__);
+            return 0;
+         }
+         esp_entry->l_spi = esphdr->spi;
+         esp_entry->l_ip = tuple->src.u3.ip;
+         esp_entry->r_ip = tuple->dst.u3.ip;
+      }
+   }
+
+   DEBUGP( "%s: entry_info: tspi %u l_spi 0x%x r_spi 0x%x l_ip %u.%u.%u.%u r_ip %u.%u.%u.%u srcIP %u.%u.%u.%u dstIP %u.%u.%u.%u\n",
+         __FUNCTION__, esp_entry->tspi, esp_entry->l_spi, esp_entry->r_spi, NIPQUAD(esp_entry->l_ip), NIPQUAD(esp_entry->r_ip), NIPQUAD(tuple->src.u3.ip), NIPQUAD(tuple->dst.u3.ip) );
+
+   tuple->dst.u.esp.spi = tuple->src.u.esp.spi = esp_entry->tspi;
+   esp_entry->pkt_rcvd++;
+
+   return 1;
+}
+
+/* print esp part of tuple */
+static int esp_print_tuple(struct seq_file *s,
+                           const struct nf_conntrack_tuple *tuple)
+{
+   return seq_printf(s, "srcspi=0x%x dstspi=0x%x ",
+          tuple->src.u.esp.spi, tuple->dst.u.esp.spi);
+}
+
+/* print private data for conntrack */
+static int esp_print_conntrack(struct seq_file *s, struct nf_conn *ct)
+{
+   return seq_printf(s, "timeout=%u, stream_timeout=%u ",
+                    (ct->proto.esp.timeout / HZ),
+                    (ct->proto.esp.stream_timeout / HZ));
+}
+
+/* Returns verdict for packet, and may modify conntrack */
+static int esp_packet(struct nf_conn *ct, const struct sk_buff *skb,
+                      unsigned int dataoff, enum ip_conntrack_info ctinfo,
+                      int pf, unsigned int hooknum)
+{
+   const struct iphdr *iph = ip_hdr(skb);
+   struct esphdr _esphdr, *esphdr;
+
+   esphdr = skb_header_pointer(skb, dataoff, sizeof(_esphdr), &_esphdr);
+
+   DEBUGP("%s (0x%x) %u.%u.%u.%u <-> %u.%u.%u.%u status %s info %d %s\n", __FUNCTION__, esphdr->spi, NIPQUAD(iph->saddr), NIPQUAD(iph->daddr), (ct->status & IPS_SEEN_REPLY) ? "SEEN" : "NOT_SEEN", ctinfo, (ctinfo == IP_CT_NEW ) ? "CT_NEW" : "SEEN_REPLY" );
+
+   /* If we've seen traffic both ways, this is some kind of ESP
+      stream.  Extend timeout. */
+   if( test_bit(IPS_SEEN_REPLY_BIT, &ct->status) ) 
+   {
+      nf_ct_refresh_acct(ct, ctinfo, skb, ESP_STREAM_TIMEOUT);
+      /* Also, more likely to be important, and not a probe */
+      if( !test_and_set_bit(IPS_ASSURED_BIT, &ct->status) )
+         nf_conntrack_event_cache(IPCT_ASSURED, ct);
+   } 
+   else
+      nf_ct_refresh_acct(ct, ctinfo, skb, ESP_TIMEOUT);
+
+   return NF_ACCEPT;
+}
+
+/* Called when a new connection for this protocol found. */
+static int esp_new(struct nf_conn *ct, const struct sk_buff *skb,
+                   unsigned int dataoff)
+{
+   const struct iphdr *iph = ip_hdr(skb);
+   struct _esp_table *esp_entry;
+   struct esphdr _esphdr, *esphdr;
+
+   ct->proto.esp.stream_timeout = ESP_STREAM_TIMEOUT;
+   ct->proto.esp.timeout = ESP_TIMEOUT;
+
+   esphdr = skb_header_pointer(skb, dataoff, sizeof(_esphdr), &_esphdr);
+
+   DEBUGP("%s SPI(0x%x) %u.%u.%u.%u <-> %u.%u.%u.%u ct %p\n",
+           __FUNCTION__, esphdr->spi, NIPQUAD(iph->saddr), NIPQUAD(iph->daddr), ct);
+
+   if( (esp_entry = search_esp_entry_by_spi(esphdr->spi, 0)) != NULL ) 
+      esp_entry->ct = ct;
+   else
+      DEBUGP("In esp_new(), cannot find an entry with SPI %x\n", esphdr->spi);
+
+   return 1;
+}
+
+/* protocol helper struct */
+struct nf_conntrack_l4proto nf_conntrack_l4proto_esp4 = {
+   .l3proto = PF_INET,
+   .l4proto = IPPROTO_ESP,
+   .name = "esp",
+   .pkt_to_tuple = esp_pkt_to_tuple,
+   .invert_tuple = esp_invert_tuple,
+   .print_tuple = esp_print_tuple,
+   .print_conntrack = esp_print_conntrack,
+   .packet = esp_packet,
+   .new = esp_new,
+   .me = THIS_MODULE,
+};
+
+int __init nf_ct_proto_esp_init(void)
+{
+   return nf_conntrack_l4proto_register(&nf_conntrack_l4proto_esp4);
+}
+
+void __exit nf_ct_proto_esp_fini(void)
+{
+   int idx = 0;
+
+   for( ; idx < MAX_PORTS; idx++ )
+      if( esp_table[idx].inuse == IPSEC_INUSE )
+         del_timer(&esp_table[idx].refresh_timer);
+
+   nf_conntrack_l4proto_unregister(&nf_conntrack_l4proto_esp4);
+}
+module_init(nf_ct_proto_esp_init);
+module_exit(nf_ct_proto_esp_fini);
+
+MODULE_LICENSE("GPL");
