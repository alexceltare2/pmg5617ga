Index: bsa-1.0.1/bsa_peer/bsa_driver_brcm.c
===================================================================
--- bsa-1.0.1.orig/bsa_peer/bsa_driver_brcm.c	2017-04-28 10:14:30.535154456 +0800
+++ bsa-1.0.1/bsa_peer/bsa_driver_brcm.c	2017-04-28 10:37:58.527104679 +0800
@@ -21,6 +21,7 @@
 #include "bcmwifi_channels.h"
 #include <pthread.h>
 #include <sys/prctl.h>
+#include "bsa_peer_common.h"
 
 #if 1 /* #36467, MAC filter with SONiQ, cpwang, 2017-04-18 10:56:46 */
 #include "zcfg_eid.h"
@@ -107,7 +108,7 @@
     FILE *fp = NULL;
 
     sprintf(macAddr,""MACSTR"",MAC2STR(mac));
-    bsa_printf(BSA_DEBUG, "[%s] ifname=%s mac=%s \n", __FUNCTION__, ifname, macAddr);
+    bsa_printf(BSA_DEBUG, "BSA_PEER:[%s] ifname=%s mac=%s \n", __FUNCTION__, ifname, macAddr);
 
     do {
         sprintf(buf, "wlctl -i %s rssi %s > %s", ifname, macAddr, filePath2);
@@ -150,161 +151,317 @@
 	return 0;
 }
 
+zcfgRet_t bsa_brcm_get_operating_class(const char *ifname, unsigned char band, unsigned int CurBandwidth, unsigned char channel, unsigned int sideband, unsigned short *opclass)
+{
+	zcfgRet_t ret = ZCFG_INTERNAL_ERROR;
+	int i,k = 0;
+	char *file_path = "/tmp/.country_res";
+	char cmd[64] = {0};
+	char buf[64] = {0};
+	FILE *fp = NULL;
+	char region[5] = {0};
+	char *cp = NULL;
+
+	sprintf(cmd, "wlctl -i %s country > %s", ifname, file_path);
+	system(cmd);
+
+	if((fp = fopen(file_path, "r"))) {
+		if(fgets(buf, sizeof(buf), fp) != NULL) {
+            cp = strchr(buf, '(');
+            if(cp) {
+            	cp += 1;
+            	i = 0; 
+            	while(i<4) {
+                	if(*cp == '/') {
+                		region[i] = '\0';
+                		break;
+                	}
+                	else {
+                		region[i] = *cp;
+                		cp++;
+                	}
+                	i++;
+                }
+            }
+
+		}
+		fclose(fp);
+		unlink(file_path);
+	}
+
+	bsa_printf(BSA_DEBUG, "BSA_PEER:[%s] region %s, band %d, CurBandwidth %d, channel %d, sideband %d\n",
+		__FUNCTION__, region, band, CurBandwidth, channel, sideband);
+
+	if( (!strcmp(region, "US")) || (!strcmp(region, "Q2"))) {
+		for(i=0; i<(sizeof(opclass_table_US)/sizeof(opclass_t)); i++) {
+			if((opclass_table_US[i].band == band) && (opclass_table_US[i].CurBandwidth == CurBandwidth) && 
+				(opclass_table_US[i].sideband == sideband)) {
+				for(k=0; k<opclass_table_US[i].chanlist_len; k++) {
+					if(opclass_table_US[i].chanlist[k] == channel) {
+						*opclass = opclass_table_US[i].opclass;
+						return ZCFG_SUCCESS;
+					}
+				}
+			}
+		}
+	}
+	else if( (!strcmp(region, "EU")) || (!strcmp(region, "E0"))) {
+		for(i=0; i<(sizeof(opclass_table_EU)/sizeof(opclass_t)); i++) {
+			if((opclass_table_EU[i].band == band) && (opclass_table_EU[i].CurBandwidth == CurBandwidth) && 
+				(opclass_table_EU[i].sideband == sideband)) {
+				for(k=0; k<opclass_table_EU[i].chanlist_len; k++) {
+					if(opclass_table_EU[i].chanlist[k] == channel) {
+						*opclass = opclass_table_EU[i].opclass;
+						return ZCFG_SUCCESS;
+					}
+				}
+			}
+		}	
+	}
+	else {
+		bsa_printf(BSA_ERROR, "BSA_PEER:[%s] country region %s can't match\n", __FUNCTION__, region);
+	}
+
+	return ret;
+}
+
+
+zcfgRet_t bsa_brcm_get_phy_type(const char *ifname, uint8_t *phytype)
+{
+	char sysCmd[64] = {0};
+	char buf[256] = {0};
+	char filePath[64] = {0};
+	FILE *fp = NULL;
+	char nmode = -1;
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	sprintf(filePath, "/tmp/%s_phytype_nvram", ifname);
+	sprintf(sysCmd, "nvram show | grep %s_nmode > %s", ifname, filePath);
+	system(sysCmd);
+
+	if ((fp = fopen(filePath, "r")) != NULL) {
+		while(fgets(buf, sizeof(buf), fp)) {
+			if(strstr(buf, "_nmode=")) {
+				sscanf(buf, "%*[^=]=%d", &nmode);
+				break;
+			}
+		}
+		fclose(fp);
+		remove(filePath);
+	}
+	if(nmode == 0) {
+		*phytype = RPE_PHYTYPE_OFDM;
+	}
+	else {
+		*phytype = RPE_PHYTYPE_HT;
+	}
+
+	return ret;
+}
+
+zcfgRet_t bsa_brcm_get_gen_intf_info(const char *ifname, struct bsa_drv_gen_intf_info *intf_info) {
+	FILE *fp = NULL;
+	const char *file_path = "/tmp/.intf_info_result";
+	char buf[100] = {0};
+	char len = sizeof(buf) -1;
+
+	sprintf(buf, "wlctl -i %s beacon_info > %s", ifname, file_path);
+	system(buf);
+
+	if((fp = fopen(file_path, "r"))) {
+		memset(buf, 0, sizeof(buf));
+		while(fgets(buf, len, fp) != NULL) {
+			if(strstr(buf, "BSSID")) {
+				sscanf(buf, "BSSID    : %hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &intf_info->bssid[0], &intf_info->bssid[1],
+					&intf_info->bssid[2], &intf_info->bssid[3], &intf_info->bssid[4], &intf_info->bssid[5]);
+			}
+			else if(strstr(buf, "Tag:0") && strstr(buf, "SSID")) {
+				sscanf(buf, "Tag:0 Len:%hhu - SSID: '%s", &intf_info->ssid_len, intf_info->ssid);
+				intf_info->ssid[intf_info->ssid_len] = '\0';
+			}
+			else if(strstr(buf, "Beacon Interval")) {
+				sscanf(buf, "Beacon Interval: 0x%hx", &intf_info->beacon_interval);
+			}
+			else if(strstr(buf, "HT Capabilities")) {
+				(intf_info->drivercap) |= RPE_CAPAB_IS_HT;
+				sscanf(buf, "Tag:%hhu Len:%hhu - HT Capabilities", &(intf_info->htcap.hc_id), &(intf_info->htcap.hc_len));
+				if(fgets(buf, len, fp) != NULL) {
+					sscanf(buf, "%*[^:]: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx",
+						&(intf_info->htcap.hc_cap[0]), &(intf_info->htcap.hc_cap[1]), &(intf_info->htcap.hc_ampdu),
+						&(intf_info->htcap.hc_mcsset[0]), &(intf_info->htcap.hc_mcsset[1]), &(intf_info->htcap.hc_mcsset[2]),
+						&(intf_info->htcap.hc_mcsset[3]), &(intf_info->htcap.hc_mcsset[4]), &(intf_info->htcap.hc_mcsset[5]),
+						&(intf_info->htcap.hc_mcsset[6]), &(intf_info->htcap.hc_mcsset[7]), &(intf_info->htcap.hc_mcsset[8]),
+						&(intf_info->htcap.hc_mcsset[9]), &(intf_info->htcap.hc_mcsset[10]), &(intf_info->htcap.hc_mcsset[11]),
+						&(intf_info->htcap.hc_mcsset[12]));
+				}
+				if(fgets(buf, len, fp) != NULL) {
+					sscanf(buf, "%*[^:]: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx",
+						&(intf_info->htcap.hc_mcsset[13]), &(intf_info->htcap.hc_mcsset[15]),
+						&(intf_info->htcap.hc_mcsset[15]), &(intf_info->htcap.hc_extcap[0]), &(intf_info->htcap.hc_extcap[1]),
+						&(intf_info->htcap.hc_txbf[0]), &(intf_info->htcap.hc_txbf[1]), &(intf_info->htcap.hc_txbf[2]),
+						&(intf_info->htcap.hc_txbf[3]), &(intf_info->htcap.hc_antenna));
+				}
+			}
+			else if(strstr(buf, "HT Information")) {
+				sscanf(buf, "Tag:%hhu Len:%hhu - HT Information", &(intf_info->htop.hi_id), &(intf_info->htop.hi_len));
+				if(fgets(buf, len, fp) != NULL) {
+					sscanf(buf, "%*[^:]: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx",
+						&(intf_info->htop.hi_ctrlchannel), &(intf_info->htop.hi_byte1), &(intf_info->htop.hi_byte2),
+						&(intf_info->htop.hi_byte3), &(intf_info->htop.hi_byte4), &(intf_info->htop.hi_byte5),
+						&(intf_info->htop.hi_basicmcsset[0]), &(intf_info->htop.hi_basicmcsset[1]), &(intf_info->htop.hi_basicmcsset[2]),
+						&(intf_info->htop.hi_basicmcsset[3]), &(intf_info->htop.hi_basicmcsset[4]), &(intf_info->htop.hi_basicmcsset[5]),
+						&(intf_info->htop.hi_basicmcsset[6]), &(intf_info->htop.hi_basicmcsset[7]), &(intf_info->htop.hi_basicmcsset[8]),
+						&(intf_info->htop.hi_basicmcsset[9]));
+				}
+				if(fgets(buf, len, fp) != NULL) {
+					sscanf(buf, "%*[^:]: %hhx %hhx %hhx %hhx %hhx %hhx",
+						&(intf_info->htop.hi_basicmcsset[10]), &(intf_info->htop.hi_basicmcsset[11]), &(intf_info->htop.hi_basicmcsset[12]),
+						&(intf_info->htop.hi_basicmcsset[13]), &(intf_info->htop.hi_basicmcsset[14]), &(intf_info->htop.hi_basicmcsset[15]));
+				}
+			}
+			else if(strstr(buf, "Capabilities")) {
+				uint32_t tmp_cap = 0;
+				sscanf(buf, "Capabilities: 0x%x", &tmp_cap);
+#if 1 // work around for Brcm bug
+				if(tmp_cap >= 0x10000) {
+					tmp_cap >>= 16;
+				}
+#endif
+				intf_info->capinfo = (uint16_t)tmp_cap;
+			}
+			else if(strstr(buf, "Tag:191")) {
+				// VHT Capabilities
+				(intf_info->drivercap) |= RPE_CAPAB_IS_VHT;
+				sscanf(buf, "Tag:%hhu Len:%hhu - %*s", &(intf_info->vhtcap.vht_id), &(intf_info->vhtcap.vht_len));
+				if(fgets(buf, len, fp) != NULL) {
+					sscanf(buf, "%hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx",
+						&(intf_info->vhtcap.vht_cap[0]), &(intf_info->vhtcap.vht_cap[1]), &(intf_info->vhtcap.vht_cap[2]),
+						&(intf_info->vhtcap.vht_cap[3]), &(intf_info->vhtcap.vht_mcs_nss_set[0]), &(intf_info->vhtcap.vht_mcs_nss_set[1]),
+						&(intf_info->vhtcap.vht_mcs_nss_set[2]), &(intf_info->vhtcap.vht_mcs_nss_set[3]), &(intf_info->vhtcap.vht_mcs_nss_set[4]),
+						&(intf_info->vhtcap.vht_mcs_nss_set[5]), &(intf_info->vhtcap.vht_mcs_nss_set[6]), &(intf_info->vhtcap.vht_mcs_nss_set[7]));
+				}
+			}
+			else if(strstr(buf, "Tag:192")) {
+				// VHT Capabilities
+				sscanf(buf, "Tag:%hhu Len:%hhu - %*s", &(intf_info->vhtop.vhtop_id), &(intf_info->vhtop.vhtop_len));
+				if(fgets(buf, len, fp) != NULL) {
+					sscanf(buf, "%hhx %hhx %hhx %hhx %hhx",
+						&(intf_info->vhtop.vhtop_info[0]), &(intf_info->vhtop.vhtop_info[1]), &(intf_info->vhtop.vhtop_info[2]),
+						&(intf_info->vhtop.vhtop_bvhtmcs[0]), &(intf_info->vhtop.vhtop_bvhtmcs[1]));
+				}
+			}
+		}
+		fclose(fp);
+		unlink(file_path);
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t bsa_brcm_get_fat_intf_info(const char *ifname, unsigned short *fat) {
+	FILE *fp = NULL;
+	const char *file_path = "/tmp/.fat_info";
+	char buf[256] = {0};
+	int len = sizeof(buf) -1;
+	int inbss = 0;
+	int obss = 0;
+	int goodtx = 0;
+	int badtx = 0;
+	int nocat = 0;
+	int nopkt = 0;
+
+	sprintf(buf, "wlctl -i %s chanim_stats > %s", ifname, file_path);
+	system(buf);
+
+	/* =========== command result ================
+	version: 2
+	chanspec tx   inbss   obss   nocat   nopkt   doze     txop     goodtx  badtx   glitch   badplcp  knoise  idle  timestamp
+	0x1906  5       0       21      6       12      0       3       0       0       1494    8       -75     10      12374388
+	===============================================*/
+	/* channel capacity = 100 - (inbss + obss + goodtx + badtx + nocat + nopkt)*/
+
+	if((fp = fopen(file_path, "r"))) {
+		memset(buf, 0, sizeof(buf));
+		while(fgets(buf, len, fp) != NULL) {
+			if(strstr(buf, "inbss")) {
+				memset(buf, 0, sizeof(buf));
+				if(fgets(buf, len, fp) != NULL) {
+					bsa_printf(BSA_DEBUG, "BSA_PEER:[%s] chanim_stats=> %s\n", __FUNCTION__, buf);
+					sscanf(buf, "0x%*x %*d %d %d %d %d %*d %*d %d %d", &inbss, &obss, &nocat, &nopkt, &goodtx, &badtx);
+					*fat = 100 - (inbss + obss + goodtx + badtx + nocat + nopkt);
+					bsa_printf(BSA_DEBUG, "BSA_PEER:[%s] fat %d\n", __FUNCTION__, *fat);
+				}
+				break;
+			}
+		}
+
+		fclose(fp);
+		unlink(file_path);
+	}
+
+	return ZCFG_SUCCESS;
+}
+
 void bsa_sub_cmd_process(const char *ifname, int16_t sub_cmd, struct bsa_drv_intf_info* drv_event_info)
 {
-	char cmd[100] = {0};
-	//FILE *fp = NULL;
-	static char *file_path = "/tmp/.cmd_result";
-	const char *param_tmp = NULL;
-	json_object *intf_info_Jobj = NULL;
-	json_object *htcap_Jobj = NULL;
-	json_object *htop_Jobj = NULL;
-	json_object *vhtcap_Jobj = NULL;
-	json_object *vhtop_Jobj = NULL;
 	struct bsa_drv_gen_intf_info *drv_event_gen_info = NULL;
 	struct bsa_drv_intf_fat_info *drv_event_fat_info = NULL;
-	int i = 0;
-	char buf[64] = {0};
-	char mac_str[3] = {0};
-	char *end_ptr = NULL;
+	struct ChSpec chspec;
 
 	switch(sub_cmd) {
 		case BSA_INTF_INFO_GEN_CMD:
 		{
-			sprintf(cmd, "zywlctl -i %s get_intf_info_gen > %s", ifname, file_path);
-			system(cmd);
-			intf_info_Jobj = json_object_from_file(file_path);
-			//printf("%s: %s\n", __FUNCTION__, json_object_to_json_string(intf_info_Jobj));
-
 			drv_event_gen_info = &drv_event_info->u.bsa_drv_gen_intf_info_var;
-			param_tmp = json_object_get_string(json_object_object_get(intf_info_Jobj, "ifname"));
-			memcpy(drv_event_gen_info->ifname, param_tmp, IFNAMSIZ);
-			param_tmp = json_object_get_string(json_object_object_get(intf_info_Jobj, "ssid"));
-			memcpy(drv_event_gen_info->ssid, param_tmp, MAX_SSID_LEN);
-			param_tmp = json_object_get_string(json_object_object_get(intf_info_Jobj, "bssid"));
-			for(i=0; i<ETH_ALEN; i++) {
-				memcpy(mac_str, param_tmp+(i*2)+i, 2);
-				mac_str[2] = '\0';
-				drv_event_gen_info->bssid[i] = (unsigned char)strtol(mac_str, NULL, 16);
-			}
-			drv_event_gen_info->mdid = json_object_get_int(json_object_object_get(intf_info_Jobj, "mdid"));
-			drv_event_gen_info->ssid_len = json_object_get_int(json_object_object_get(intf_info_Jobj, "ssid_len"));
-			drv_event_gen_info->ifname_size = json_object_get_int(json_object_object_get(intf_info_Jobj, "ifname_size"));
-			drv_event_gen_info->channel = json_object_get_int(json_object_object_get(intf_info_Jobj, "channel"));
-			drv_event_gen_info->band = json_object_get_int(json_object_object_get(intf_info_Jobj, "band"));
-			drv_event_gen_info->opclass = json_object_get_int(json_object_object_get(intf_info_Jobj, "opclass"));
-			drv_event_gen_info->phytype = json_object_get_int(json_object_object_get(intf_info_Jobj, "phytype"));
-			drv_event_gen_info->drivercap = json_object_get_int(json_object_object_get(intf_info_Jobj, "drivercap"));
-			drv_event_gen_info->capinfo = json_object_get_int(json_object_object_get(intf_info_Jobj, "capinfo"));
-			drv_event_gen_info->beacon_interval = json_object_get_int(json_object_object_get(intf_info_Jobj, "beacon_interval"));
-
-			/** 802.11n HT Capability IE **/
-			htcap_Jobj = json_object_object_get(intf_info_Jobj, "htcap");
-			if(htcap_Jobj) {
-				drv_event_gen_info->htcap.hc_id = json_object_get_int(json_object_object_get(htcap_Jobj, "hc_id"));
-				drv_event_gen_info->htcap.hc_len = json_object_get_int(json_object_object_get(htcap_Jobj, "hc_len"));
-				drv_event_gen_info->htcap.hc_cap[0] = json_object_get_int(json_object_object_get(htcap_Jobj, "hc_cap_0"));
-				drv_event_gen_info->htcap.hc_cap[1] = json_object_get_int(json_object_object_get(htcap_Jobj, "hc_cap_1"));
-				drv_event_gen_info->htcap.hc_ampdu = json_object_get_int(json_object_object_get(htcap_Jobj, "hc_ampdu"));
-				for(i=0; i<sizeof(drv_event_gen_info->htcap.hc_mcsset); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "hc_mcsset_%d", i);
-					drv_event_gen_info->htcap.hc_mcsset[i] = json_object_get_int(json_object_object_get(htcap_Jobj, buf));
-				}
-				for(i=0; i<sizeof(drv_event_gen_info->htcap.hc_extcap); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "hc_extcap_%d", i);
-					drv_event_gen_info->htcap.hc_extcap[i] = json_object_get_int(json_object_object_get(htcap_Jobj, buf));
-				}
-				for(i=0; i<sizeof(drv_event_gen_info->htcap.hc_txbf); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "hc_txbf_%d", i);
-					drv_event_gen_info->htcap.hc_txbf[i] = json_object_get_int(json_object_object_get(htcap_Jobj, buf));
-				}
-				drv_event_gen_info->htcap.hc_antenna = json_object_get_int(json_object_object_get(htcap_Jobj, "hc_antenna"));
-			}
-
-			/** 802.11n HT Information IE **/
-			htop_Jobj = json_object_object_get(intf_info_Jobj, "htop");
-			if(htop_Jobj) {
-				drv_event_gen_info->htop.hi_id = json_object_get_int(json_object_object_get(htop_Jobj, "hi_id"));
-				drv_event_gen_info->htop.hi_len = json_object_get_int(json_object_object_get(htop_Jobj, "hi_len"));
-				drv_event_gen_info->htop.hi_ctrlchannel = json_object_get_int(json_object_object_get(htop_Jobj, "hi_ctrlchannel"));
-				drv_event_gen_info->htop.hi_byte1 = json_object_get_int(json_object_object_get(htop_Jobj, "hi_byte1"));
-				drv_event_gen_info->htop.hi_byte2 = json_object_get_int(json_object_object_get(htop_Jobj, "hi_byte2"));
-				drv_event_gen_info->htop.hi_byte3 = json_object_get_int(json_object_object_get(htop_Jobj, "hi_byte3"));
-				drv_event_gen_info->htop.hi_byte4 = json_object_get_int(json_object_object_get(htop_Jobj, "hi_byte4"));
-				drv_event_gen_info->htop.hi_byte5 = json_object_get_int(json_object_object_get(htop_Jobj, "hi_byte5"));
-				for(i=0; i<sizeof(drv_event_gen_info->htop.hi_basicmcsset); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "hi_basicmcsset_%d", i);
-					drv_event_gen_info->htop.hi_basicmcsset[i] = json_object_get_int(json_object_object_get(htop_Jobj, buf));
-				}
-			}
-
-			/** 802.11ac VHT Capabilities element **/
-			vhtcap_Jobj = json_object_object_get(intf_info_Jobj, "vhtcap");
-			if(vhtcap_Jobj) {
-				drv_event_gen_info->vhtcap.vht_id = json_object_get_int(json_object_object_get(vhtcap_Jobj, "vht_id"));
-				drv_event_gen_info->vhtcap.vht_len = json_object_get_int(json_object_object_get(vhtcap_Jobj, "vht_len"));
-				for(i=0; i<sizeof(drv_event_gen_info->vhtcap.vht_cap); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "vht_cap_%d", i);
-					drv_event_gen_info->vhtcap.vht_cap[i] = json_object_get_int(json_object_object_get(vhtcap_Jobj, buf));
-				}
-				for(i=0; i<sizeof(drv_event_gen_info->vhtcap.vht_mcs_nss_set); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "vht_mcs_nss_set_%d", i);
-					drv_event_gen_info->vhtcap.vht_mcs_nss_set[i] = json_object_get_int(json_object_object_get(vhtcap_Jobj, buf));
-				}
-			}
-
-			/** 802.11ac VHT Operation element **/
-			vhtop_Jobj = json_object_object_get(intf_info_Jobj, "vhtop");
-			if(vhtop_Jobj) {
-				drv_event_gen_info->vhtop.vhtop_id = json_object_get_int(json_object_object_get(vhtop_Jobj, "vhtop_id"));
-				drv_event_gen_info->vhtop.vhtop_len = json_object_get_int(json_object_object_get(vhtop_Jobj, "vhtop_len"));
-				for(i=0; i<sizeof(drv_event_gen_info->vhtop.vhtop_info); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "vhtop_info_%d", i);
-					drv_event_gen_info->vhtop.vhtop_info[i] = json_object_get_int(json_object_object_get(vhtop_Jobj, buf));
-				}
-				for(i=0; i<sizeof(drv_event_gen_info->vhtop.vhtop_bvhtmcs); i++) {
-					memset(buf, 0, sizeof(buf));
-					sprintf(buf, "vhtop_bvhtmcs_%d", i);
-					drv_event_gen_info->vhtop.vhtop_bvhtmcs[i] = json_object_get_int(json_object_object_get(vhtop_Jobj, buf));
-				}
+			memcpy(drv_event_gen_info->ifname, ifname, IFNAMSIZ);
+
+			drv_event_gen_info->mdid = 0;  //TODO: Different mdid for different steering domain.
+			drv_event_gen_info->ifname_size = strlen(ifname);
+
+			/* get current channel and band */
+			bsa_brcm_get_current_channel_info(ifname, &chspec);
+			drv_event_gen_info->channel = chspec.channel;
+			if(chspec.band == 2) {
+				drv_event_gen_info->band = BAND_24G;
 			}
+			else {
+				drv_event_gen_info->band = BAND_5G;
+			}
+			bsa_brcm_get_operating_class(ifname, drv_event_gen_info->band, chspec.bw,
+					drv_event_gen_info->channel, (unsigned int)chspec.sb, &(drv_event_gen_info->opclass));
+			/* get phy type */
+			bsa_brcm_get_phy_type(ifname, &(drv_event_gen_info->phytype)); 
+			drv_event_gen_info->drivercap = 0x0; // initialize drivercap
+			/*
+			enum RPE_intf_bss_capab {
+				   RPE_CAPAB_SUPPORTS_BSS_TRANS = 0x1
+				   RPE_CAPAB_IS_HT              = 0x2
+				   RPE_CAPAB_IS_VHT             = 0x4
+				   RPE_CAPAB_SUPPORTS_MONITOR   = 0x8
+			};
+			*/
+
+			bsa_brcm_get_gen_intf_info(ifname, drv_event_gen_info);
 
 			drv_event_info->cmd_spec = sub_cmd;
 
-			json_object_put(intf_info_Jobj);
 			break;
 		}
 		case BSA_INTF_INFO_FAT_CMD:
 		{
-#if 0			
-			sprintf(cmd, "zywlctl -i %s get_intf_info_fat > %s", ifname, file_path);
-			system(cmd);
-			intf_info_Jobj = json_object_from_file(file_path);
-			printf("%s: %s\n", __FUNCTION__, json_object_to_json_string(intf_info_Jobj));
-
 			drv_event_fat_info = &drv_event_info->u.bsa_drv_intf_fat_info_var;
-			drv_event_fat_info->band = json_object_get_int(json_object_object_get(intf_info_Jobj, "band"));
-			drv_event_fat_info->channel = json_object_get_int(json_object_object_get(intf_info_Jobj, "channel"));
-			drv_event_fat_info->avg_fat = 10*json_object_get_int(json_object_object_get(intf_info_Jobj, "avg_fat"));
 
-			drv_event_info->cmd_spec = sub_cmd;
-
-			json_object_put(intf_info_Jobj);
-#else
-			drv_event_fat_info = &drv_event_info->u.bsa_drv_intf_fat_info_var;
-			drv_event_fat_info->band = fat_monitor_result.band;
-			drv_event_fat_info->channel = fat_monitor_result.channel;
+			/* get current channel and band */
+			bsa_brcm_get_current_channel_info(ifname, &chspec);
+			drv_event_fat_info->channel = chspec.channel;
+			if(chspec.band == 2) {
+				drv_event_fat_info->band = BAND_24G;
+			}
+			else {
+				drv_event_fat_info->band = BAND_5G;
+			}
 			drv_event_fat_info->avg_fat = 10*(fat_monitor_result.avg_fat);
 
 			drv_event_info->cmd_spec = sub_cmd;
-#endif			
 
 			break;
 		}
@@ -574,7 +731,7 @@
 	bsa_printf(BSA_DEBUG, "BSA_PEER: Send deauth for station "MACSTR"; ifname =%s to driver",
 			MAC2STR(deauth_sta_info->sta_mac), bsa_conf_info[index].ifname);
 
-	sprintf(buf, "zywlctl -i %s disassociate set "MACSTR"", bsa_conf_info[index].ifname, MAC2STR(deauth_sta_info->sta_mac));
+	sprintf(buf, "wlctl -i %s deauthenticate "MACSTR"", bsa_conf_info[index].ifname, MAC2STR(deauth_sta_info->sta_mac));
 	system(buf);
 
 	return retval;
@@ -968,7 +1125,6 @@
 					&(bsa_sta_stats->ieee80211_bsa_sta_info_var[idx].sta_mac[4]),
 					&(bsa_sta_stats->ieee80211_bsa_sta_info_var[idx].sta_mac[5]));
 
-			    bsa_brcm_get_sta_info(bsa_conf_info[index].ifname, bsa_sta_stats->ieee80211_bsa_sta_info_var[idx].sta_mac, &sta_info, 'b');
 			    bsa_brcm_get_sta_info(bsa_conf_info[index].ifname, bsa_sta_stats->ieee80211_bsa_sta_info_var[idx].sta_mac, &sta_info, 'd');
 			    bsa_brcm_get_sta_rssi(bsa_conf_info[index].ifname, bsa_sta_stats->ieee80211_bsa_sta_info_var[idx].sta_mac, &sta_info);
 
@@ -1136,7 +1292,7 @@
 	fp = fopen(CurChannel_file, "r");
 	if(fp != NULL) {
 		while( fgets( buf, len, fp ) ) {
-			sscanf("%hu %[^(*]", (char *)&channel);
+			sscanf(buf, "%hu %[^(*]", &channel);
 		}
 		fclose(fp);
 		unlink(CurChannel_file);
@@ -1162,7 +1318,6 @@
 					&(connect_event->sta_mac[4]),
 					&(connect_event->sta_mac[5]));
 
-			    bsa_brcm_get_sta_info(bsa_conf_info[index].ifname, connect_event->sta_mac, &sta_info, 'b');
 			    bsa_brcm_get_sta_info(bsa_conf_info[index].ifname, connect_event->sta_mac, &sta_info, 'd');
 			    bsa_brcm_get_sta_rssi(bsa_conf_info[index].ifname, connect_event->sta_mac, &sta_info);
 
@@ -1199,34 +1354,13 @@
 	return retval;
 }
 
-uint16_t get_brcm_fat(char *ifname) {
-	char cmd[100] = {0};
-	static char *file_path = "/tmp/.fat_result";
-	json_object *intf_info_Jobj = NULL;
-	struct bsa_drv_intf_fat_info *drv_event_fat_info = NULL;
-	uint16_t fat = 0;
-
-	sprintf(cmd, "zywlctl -i %s get_intf_info_fat > %s", ifname, file_path);
-	system(cmd);
-	intf_info_Jobj = json_object_from_file(file_path);
-
-	fat_monitor_result.channel = json_object_get_int(json_object_object_get(intf_info_Jobj, "channel"));
-	fat_monitor_result.band = json_object_get_int(json_object_object_get(intf_info_Jobj, "band"));
-	fat = json_object_get_int(json_object_object_get(intf_info_Jobj, "avg_fat"));
-
-	json_object_put(intf_info_Jobj);
-	unlink(file_path);
-
-	return fat;
-}
-
 void *fat_monitor_periodically(void *arg) {
 	sigset_t mask;
 	int i = 0;
 	uint16_t fat = 0;
 	uint32_t sum_fat = 0;
 	uint16_t fat_monitor_times = 0;
-	uint32_t period = NULL;
+	uint32_t period = 0;
 	time_t start_time, stop_time, curr_time, diff_time;
 	struct fat_monitor_thread_t *fat_monitor_params;
 	uint8_t ifname[BSA_IFNAMSIZ];
@@ -1252,7 +1386,7 @@
 	bsa_printf(BSA_DEBUG, "BSA_PEER: fat_monitor_periodically, start %d, stop %d, period %d, ifname %s\n", start_time, stop_time, period, ifname);
 	if(period < FAT_MONITOR_MIN_PERIOD) {
 		while(1) {
-			fat_monitor_result.avg_fat = get_brcm_fat(ifname);
+			bsa_brcm_get_fat_intf_info(ifname, &fat_monitor_result.avg_fat);
 			bsa_printf(BSA_DEBUG, "BSA_PEER: avg_fat %d\n", fat_monitor_result.avg_fat);
 			curr_time = time(NULL);
 			if(curr_time < stop_time) {
@@ -1282,7 +1416,7 @@
 				sleep(diff_time);
 			}
 			else {
-				fat = get_brcm_fat(ifname);
+				bsa_brcm_get_fat_intf_info(ifname, &fat);
 				sum_fat += fat;
 				fat_monitor_times ++;
 				curr_time = time(NULL);
Index: bsa-1.0.1/bsa_peer/bsa_driver_brcm.h
===================================================================
--- bsa-1.0.1.orig/bsa_peer/bsa_driver_brcm.h	2017-04-28 10:14:30.535154456 +0800
+++ bsa-1.0.1/bsa_peer/bsa_driver_brcm.h	2017-04-28 10:30:11.611121186 +0800
@@ -33,6 +33,24 @@
 	BSA_INTF_STATE_INVALID	= 4,
 };
 
+enum RPE_intf_bss_capab {
+	RPE_CAPAB_SUPPORTS_BSS_TRANS = 0x1,
+	RPE_CAPAB_IS_HT              = 0x2,
+	RPE_CAPAB_IS_VHT             = 0x4,
+	RPE_CAPAB_SUPPORTS_MONITOR   = 0x8
+};
+
+enum RPE_phy_type {
+	RPE_PHYTYPE_DSSS = 2,
+	RPE_PHYTYPE_OFDM = 4,
+	RPE_PHYTYPE_HRDSSS = 5,
+	RPE_PHYTYPE_ERP = 6,
+	RPE_PHYTYPE_HT = 7,
+	RPE_PHYTYPE_DMG = 8,
+	RPE_PHYTYPE_VHT = 9,
+	RPE_PHYTYPE_TVHT = 10
+};
+
 struct bsa_drv_peer_event_data {
 	char name[32];
 	uint8_t bssid[ETH_ALEN];
@@ -267,9 +285,12 @@
 int bsa_brcm_update_mac_filter_table(void *priv, int index, void *cmd_info);
 int bsa_brcm_send_btm_req(void *priv, int index, void *cmd_info);
 int bsa_brcm_get_associated_stations_info(void *priv, int index);
-uint16_t get_brcm_fat(char *ifname);
 void *fat_monitor_periodically(void *arg);
 int monitor_thread_init(struct fat_monitor_thread_t *fat_monitor_params);
 int bsa_brcm_start_fat_monitor(void *priv, int index, uint32_t fat_period);
+zcfgRet_t bsa_brcm_get_operating_class(const char *ifname, unsigned char band, unsigned int CurBandwidth, unsigned char channel, unsigned int sideband, unsigned short *opclass);
+zcfgRet_t bsa_brcm_get_phy_type(const char *ifname, uint8_t *phytype);
+zcfgRet_t bsa_brcm_get_gen_intf_info(const char *ifname, struct bsa_drv_gen_intf_info *intf_info);
+zcfgRet_t bsa_brcm_get_fat_intf_info(const char *ifname, unsigned short *fat);
 
 #endif
Index: bsa-1.0.1/bsa_peer/bsa_peer_common.h
===================================================================
--- bsa-1.0.1.orig/bsa_peer/bsa_peer_common.h	2017-04-28 10:14:30.535154456 +0800
+++ bsa-1.0.1/bsa_peer/bsa_peer_common.h	2017-04-28 10:30:06.179121378 +0800
@@ -1,4 +1,71 @@
+#define BAND_24G 0
+#define BAND_5G 1
 
+#define CHAN_LIST_LEN(x) sizeof(x)/sizeof(unsigned char)
+
+static unsigned char US_channel_set_1[] = {36,40,44,48};
+static unsigned char US_channel_set_2[] = {52,56,60,64};
+static unsigned char US_channel_set_3[] = {149,153,157,161};
+static unsigned char US_channel_set_4[] = {100,104,108,112,116,120,124,128,132,136,140};
+static unsigned char US_channel_set_5[] = {149,153,157,161,165};
+static unsigned char US_channel_set_12[] = {1,2,3,4,5,6,7,8,9,10,11};
+static unsigned char US_channel_set_22[] = {36,44};
+static unsigned char US_channel_set_23[] = {52,60};
+static unsigned char US_channel_set_24[] = {100,108,116,124,132};
+static unsigned char US_channel_set_25[] = {149,157};
+static unsigned char US_channel_set_27[] = {40,48};
+static unsigned char US_channel_set_28[] = {56,64};
+static unsigned char US_channel_set_29[] = {104,112,120,128,136};
+static unsigned char US_channel_set_30[] = {153,161};
+static unsigned char US_channel_set_32[] = {1,2,3,4,5,6,7};
+static unsigned char US_channel_set_33[] = {5,6,7,8,9,10,11};
+
+static opclass_t opclass_table_US[] = {
+	{1, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(US_channel_set_1), US_channel_set_1},
+	{2, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(US_channel_set_2), US_channel_set_2},
+	{3, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(US_channel_set_3), US_channel_set_3},
+	{4, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(US_channel_set_4), US_channel_set_4},
+	{5, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(US_channel_set_5), US_channel_set_5},
+	{12, BAND_24G, 20, CTLSB_NONE, CHAN_LIST_LEN(US_channel_set_12), US_channel_set_12},
+	{22, BAND_5G, 40, CTLSB_LOWER, CHAN_LIST_LEN(US_channel_set_22), US_channel_set_22},
+	{23, BAND_5G, 40, CTLSB_LOWER, CHAN_LIST_LEN(US_channel_set_23), US_channel_set_23},
+	{24, BAND_5G, 40, CTLSB_LOWER, CHAN_LIST_LEN(US_channel_set_24), US_channel_set_24},
+	{25, BAND_5G, 40, CTLSB_LOWER, CHAN_LIST_LEN(US_channel_set_25), US_channel_set_25},
+	{27, BAND_5G, 40, CTLSB_UPPER, CHAN_LIST_LEN(US_channel_set_27), US_channel_set_27},
+	{28, BAND_5G, 40, CTLSB_UPPER, CHAN_LIST_LEN(US_channel_set_28), US_channel_set_28},
+	{29, BAND_5G, 40, CTLSB_UPPER, CHAN_LIST_LEN(US_channel_set_29), US_channel_set_29},
+	{30, BAND_5G, 40, CTLSB_UPPER, CHAN_LIST_LEN(US_channel_set_30), US_channel_set_30},
+	{32, BAND_24G, 40, CTLSB_LOWER, CHAN_LIST_LEN(US_channel_set_32), US_channel_set_32},
+	{33, BAND_24G, 40, CTLSB_UPPER, CHAN_LIST_LEN(US_channel_set_33), US_channel_set_33}
+};
+
+static unsigned char EU_channel_set_1[] = {36,40,44,48};
+static unsigned char EU_channel_set_2[] = {52,56,60,64};
+static unsigned char EU_channel_set_3[] = {100,104,108,112,116,120,124,128,132,136,140};
+static unsigned char EU_channel_set_4[] = {1,2,3,4,5,6,7,8,9,10,11,12,13};
+static unsigned char EU_channel_set_5[] = {36,44};
+static unsigned char EU_channel_set_6[] = {52,60};
+static unsigned char EU_channel_set_7[] = {100,108,116,124,132};
+static unsigned char EU_channel_set_8[] = {40,48};
+static unsigned char EU_channel_set_9[] = {56,64};
+static unsigned char EU_channel_set_10[] = {104,112,120,128,136};
+static unsigned char EU_channel_set_11[] = {1,2,3,4,5,6,7,8,9};
+static unsigned char EU_channel_set_12[] = {5,6,7,8,9,10,11,12,13};
+
+static opclass_t opclass_table_EU[] = {
+	{1, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(EU_channel_set_1), EU_channel_set_1},
+	{2, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(EU_channel_set_2), EU_channel_set_2},
+	{3, BAND_5G, 20, CTLSB_NONE, CHAN_LIST_LEN(EU_channel_set_3), EU_channel_set_3},
+	{4, BAND_24G, 20, CTLSB_NONE, CHAN_LIST_LEN(EU_channel_set_4), EU_channel_set_4},
+	{5, BAND_5G, 40, CTLSB_LOWER, CHAN_LIST_LEN(EU_channel_set_5), EU_channel_set_5},
+	{6, BAND_5G, 40, CTLSB_LOWER, CHAN_LIST_LEN(EU_channel_set_6), EU_channel_set_6},
+	{7, BAND_5G, 40, CTLSB_LOWER, CHAN_LIST_LEN(EU_channel_set_7), EU_channel_set_7},
+	{8, BAND_5G, 40, CTLSB_UPPER, CHAN_LIST_LEN(EU_channel_set_8), EU_channel_set_8},
+	{9, BAND_5G, 40, CTLSB_UPPER, CHAN_LIST_LEN(EU_channel_set_9), EU_channel_set_9},
+	{10, BAND_5G, 40, CTLSB_UPPER, CHAN_LIST_LEN(EU_channel_set_10), EU_channel_set_10},
+	{11, BAND_24G, 40, CTLSB_LOWER, CHAN_LIST_LEN(EU_channel_set_11), EU_channel_set_11},
+	{12, BAND_24G, 40, CTLSB_UPPER, CHAN_LIST_LEN(EU_channel_set_12), EU_channel_set_12}
+};
 
 typedef struct soniq_info_s {
 	uint8 supportedMCSSet[16];
